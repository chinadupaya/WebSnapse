{"version":3,"sources":["components/stylesheet.js","components/Snapse/useAnimateEdges.js","utils/helpers.js","components/Snapse/Snapse.js","utils/automata.js","components/forms/ChooseRuleForm.js","components/forms/NewNodeForm.js","components/forms/NewOutputNodeForm.js","components/forms/EditNodeForm.js","components/forms/DeleteNodeForm.js","components/ChoiceHistory/ChoiceHistory.js","components/useUnsavedChanges/useUnsavedChanges.js","App.js","reportWebVitals.js","index.js"],"names":["styles","selector","style","color","content","events","height","shape","width","useAnimateEdges","cyRef","useRef","useEffect","raf","cy","current","animOffset","animate","edges","requestAnimationFrame","cancelAnimationFrame","internal","createOutputNeuron","id","x","y","output","spike","data","rootId","label","includes","substr","indexOf","classes","position","parent","checkValidRule","rule","result","exec","console","log","createEdge","src","dst","c","source","target","allRulesValid","rules","splitRules","split","count","i","length","Snapse","neurons","onEdgeCreate","handleChangePosition","headless","setCy","elements","newId","time","array","nodes","k","element","isOutput","newOutputNode","bitstring","push","newNodes","spikes","delay","replace","out","newEdge","newEdges","convertElements","on","evt","gridGuide","guidelinesStyle","strokeStyle","horizontalDistColor","verticalDistColor","initPosAlignmentColor","edgehandles","handleNodes","preview","loopAllowed","edgeType","sourceNode","targetNode","complete","Button","className","variant","onClick","center","fit","zoom","level","CytoscapeComponent","normalizeElements","stylesheet","parseRule","testRes","forgetRes","requires","grouped","symbol","consumes","produces","delayStr","parseInt","canUseRule","step","isRandom","handleStartGuidedMode","handleSimulationEnd","newStates","produce","draft","spikeAdds","outputTracker","neuronValidRules","shouldEnd","neuron","currentRule","validRules","chosenRule","randomIndex","Math","floor","random","Object","keys","newDelay","valueOf","newSpikes","neuronOutKeys","newString","localStorage","setItem","JSON","stringify","backStep","parse","getItem","ChooseRuleForm","showChooseRuleModal","handleCloseChooseRuleModal","handleChosenRules","useImmer","values","setValues","handleSelectChange","event","neuronId","currentValues","value","GroupRules","options","neuronOptions","map","Form","Group","Label","Control","as","onChange","ruleList","form","Modal","show","onHide","backdrop","keyboard","Header","Title","Body","onSubmit","e","preventDefault","type","formReducer","state","reset","startingSpikes","name","initialFormState","NewNodeForm","showNewNodeModal","handleCloseModal","handleNewNode","handleError","handleClose","useReducer","formData","setFormData","useState","setSubmitting","handleChange","closeButton","shortid","generate","setTimeout","newNeuron","data-testid","htmlFor","required","placeholder","Text","NewOutputNodeForm","showNewOutputModal","handleCloseNewOutputModal","handleNewOutput","EditNodeForm","showEditModal","handleCloseEditModal","handleEditNode","setNeuronId","setRules","setStartingSpikes","filteredObject","reduce","r","firstUpdate","DeleteNodeForm","showDeleteModal","handleCloseDeleteModal","handleDeleteNode","defaultNeuron","TableCell","TableRow","ChoiceHistory","showChoiceHistoryModal","handleCloseHoiceHistoryModal","getLatestState","neuronIds","neuronRows","neuronCells","Table","striped","bordered","hover","useUnsavedChanges","isDirty","setDirty","message","window","onbeforeunload","when","compact","ignoreComment","spaces","sanitize","useKey","key","cb","isFocus","callbackRef","inputs","document","getElementsByTagName","input","addEventListener","handleKeyDown","code","fn","timerId","args","clearTimeout","debounced","removeEventListener","shortening","keyframes","ProgressBar","styled","div","props","isPlaying","css","App","n1","n2","n3","n4","setNeurons","setTime","setIsRandom","fileName","setFileName","Prompt","setPristine","setShowNewNodeModal","setShowNewOutputModal","setShowChooseRuleModal","setShowEditModal","setShowChoiceHistoryModal","setShowDeleteModal","setIsPlaying","hasEnded","setHasEnded","error","setError","pBar","setPBar","alert","showError","text","a","outCopy","handleNewPosition","newOutput","arr","filter","item","handleReset","tempNeurons","clear","guidedRules","setGuidedRules","onForward","onBackward","tempTime","onIntervalStepRef","p","interval","setInterval","clearInterval","path","Container","Alert","File","custom","file","files","reader","FileReader","removeJsonTextAttribute","parentElement","_parent","pOpKeys","keyNo","keyName","arrOfKey","arrIndex","nativeType","trim","ignoreDeclaration","ignoreInstruction","ignoreAttributes","ignoreCdata","ignoreDoctype","textFn","convert","xml2js","readAsText","nValue","Number","isNaN","bValue","toLowerCase","handleLoad","disabled","wrapper","json2xml","blob","Blob","saveAs","Date","toString","DropdownButton","title","Dropdown","Item","href","download","textAlign","fontWeight","Row","Col","sm","Check","defaultChecked","OverlayTrigger","placement","hide","overlay","Tooltip","backgroundColor","borderRadius","padding","size","marginBottom","display","Toggle","Menu","addedEles","remove","process","j","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cytoscape","use","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e3125bae.chunk.js","sourcesContent":["const styles = [\n    {\n        selector: '.snapse-node, .snapse-output',\n        style: {\n            'font-family': 'Computer Modern',\n            'background-opacity': '0',\n            'padding-top': '0',\n            'border-width': 0,\n            'text-halign': 'left',\n            'text-valign': 'top',\n            color: 'black',\n            content: 'data(label)'\n        }\n    },\n    {\n        selector: '.snapse-node__rules, .snapse-node__output',\n        style: {\n            'font-family': 'Computer Modern',\n            'font-style':'italic',\n            'background-color': 'white',\n            'border-width': 1,\n            events: 'no',\n            'text-wrap': 'wrap',\n            'text-halign': 'center',\n            'text-valign': 'center',\n            'text-wrap':'wrap',\n            content: 'data(label)',\n            height: 150,\n            shape: 'roundrectangle',\n            width: 100\n        }\n    },\n    {\n        selector: '.snapse-node__time, .snapse-node__spike',\n        style: {\n            'font-family': 'Computer Modern',\n            'background-opacity': '0',\n            'text-halign': 'center',\n            'text-valign': 'center',\n            content: 'data(label)',\n            events: 'no',\n            height: 15,\n            shape: 'roundrectangle',\n            width: 50\n        }\n    },\n    /*     {\n            selector: 'node',\n            style: {\n                'background-opacity': '0',\n                'padding-top': '0',\n                'text-halign': 'left',\n                'text-valign': 'top',\n                color: 'black',\n                content: 'data(label)',\n                'border-width': 1,\n                events: 'no',\n                'text-wrap': 'wrap',\n                shape: 'roundrectangle'\n            }\n        }, */\n    {\n        selector: 'edge',\n        style: {\n            'font-family': 'Computer Modern',\n            'curve-style': 'bezier',\n            'target-arrow-shape': 'triangle',\n            'text-background-color': 'white',\n            'text-background-shape': 'rectangle',\n            width: 1\n        }\n    },\n    {\n        selector: '.edge--triggering',\n        style: {\n          'line-color': 'magenta',\n          'line-style': 'dashed',\n          'target-arrow-color': 'magenta',\n          width: 3\n        }\n    }\n]\nexport default styles;\n","import { useEffect, useRef } from 'react'\nimport cytoscapejs from 'cytoscape'\n\nfunction useAnimateEdges() {\n  const cyRef = useRef(null)\n  const setCy = (internal) => {\n    cyRef.current = internal\n  }\n\n  useEffect(() => {\n    const cy = cyRef.current\n    let raf\n    let animOffset = 0\n\n    function animate() {\n      animOffset++\n      if (cy) {\n        cy.edges().animate({\n          style: { 'line-dash-offset': -animOffset }\n        })\n      }\n      raf = requestAnimationFrame(animate)\n    }\n\n    animate()\n\n    return () => {\n      if (raf) {\n        cancelAnimationFrame(raf)\n      }\n    }\n  }, [])\n\n  return [cyRef, setCy]\n}\n\nexport default useAnimateEdges\n","export const createNeuron = (newId, x,\n    y,\n    rules,\n    spike,\n    time) => [{\n        data: {\n            id: newId,\n            label: `${(newId.includes('-'))? newId.substr(0, newId.indexOf('-')) : newId}`\n        },\n        position: { x: x, y: y },\n        classes: 'snapse-node'\n    },\n    {\n        data: {\n            id: newId + '-rules',\n            parent:newId,\n            label: rules.replace(/ /g, \"\\n\")\n        },\n        position: { x: x, y: y },\n        classes: 'snapse-node__rules'\n    },\n    {\n        data: {\n            id: newId + '-spike',\n            parent: newId,\n            label: `${(spike==0)? \"λ\" : spike}`\n        },\n        position: { x: x, y: y - 60 },\n        classes: 'snapse-node__spike'\n    },\n    {\n        data: {\n            id: newId + '-time',\n            parent: newId,\n            label: time\n        },\n        position: { x: x, y: y + 90 },\n        classes: 'snapse-node__time'\n    }];\nexport const createOutputNeuron = (id,x,y,output,spike) => [\n    {\n        data: { rootId: id, id: `${id}`, label: `${(id.includes('-'))? id.substr(0, id.indexOf('-')) : id}`},\n        classes: 'snapse-output',\n        position: { x: 0, y: 0 }\n      },\n      {\n        data: { rootId: id, id: `${id}-output`, parent: id, label: output },\n        classes: 'snapse-node__output',\n        position: { x, y: y }\n      },\n      {\n        data: { rootId: id, id: `${id}-spike`, parent: id, label: spike },\n        classes: 'snapse-node__spike',\n        position: { x, y: y + 40 }\n      }\n]\nexport const checkValidRule = (rule) =>{\n    const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const testRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const forgetRe=/(a+)(\\+*\\**)\\/(a+)->(0);(0)/\n    var result = testRe.exec(rule) || forgetRe.exec(rule);\n    console.log(result);    \n    return result;\n}\n\nexport const createEdge = (src,dst,c) =>{\n    return {\n        data: {\n          id: src + '-' + dst,\n          source: src,\n          target: dst\n        },\n        classes: c\n      };\n}\n\nexport const allRulesValid = (rules) => {\n    var splitRules = rules.split(\" \");\n    var count = 0;\n    for (var i=0;i<splitRules.length;i++){\n        if(checkValidRule(splitRules[i])!=null){\n            count+=1;\n        }else{\n            console.log(\"invalidRule\", splitRules[i])\n        }\n    }\n    if(count == splitRules.length){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nexport const convertElements = elements =>{\n    var array = {\n        nodes: [],\n        edges:[],\n    }\n    for (var k in elements) {\n        var element = elements[k];\n        //console.log(element);\n        if(!element.isOutput){\n            var newNodes = createNeuron(element.id, element.position.x,element.position.y,element.rules, element.spikes, element.delay);\n            array.nodes.push(newNodes[0])\n            array.nodes.push(newNodes[1])\n            array.nodes.push(newNodes[2])\n            array.nodes.push(newNodes[3])\n            \n        }else{\n            var newOutputNode = createOutputNeuron(element.id, element.position.x,element.position.y, element.bitstring, 0);\n            array.nodes.push(newOutputNode[0])\n            array.nodes.push(newOutputNode[1])\n            array.nodes.push(newOutputNode[2])\n        } \n        if(element.out){\n            for (var i=0; i< element.out.length; i++){\n                if (element.delay<0) {\n                    console.log(element.delay)\n                    for (let out of element.out) {\n                      var newEdge = createEdge(element.id, element.out[i],' edge--triggering');\n                      array.edges.push(newEdge);\n                    }\n                }else{\n                    var newEdges = createEdge(element.id, element.out[i],'');\n                    array.edges.push(newEdges);\n                }\n            }\n        }\n    }\n    return array;\n}\n","\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport stylesheet from '../stylesheet'\nimport { Button, Container } from 'react-bootstrap';\nimport useAnimateEdges from './useAnimateEdges';\nimport { useEffect, useMemo } from 'react';\nimport { convertElements } from '../../utils/helpers';\nimport { AlignCenter } from 'react-bootstrap-icons';\n\nconst Snapse = ({ neurons, onEdgeCreate, handleChangePosition, headless }) => {\n  const [cyRef, setCy] = useAnimateEdges()\n  function handleCenterGraph() {\n    const cy = cyRef.current;\n    if (cy) {\n      cy.center();\n      cy.fit();\n      cy.zoom({\n        level: 0.8,\n        position: { x: 100, y: 100 }\n      });\n    }\n  }\n  const elements = convertElements(neurons);\n  useEffect(() => {\n    if (!headless) {\n      const cy = cyRef.current\n      if (cy) {\n        cy.on('mouseup', '.snapse-node, .snapse-output', (evt) => {\n          console.log(\"change position\", evt.target.id())\n          handleChangePosition(evt.position, evt.target.id());\n        })\n        cy.gridGuide({\n          guidelinesStyle: {\n            strokeStyle: \"black\",\n            horizontalDistColor: \"#ff0000\",\n            verticalDistColor: \"green\",\n            initPosAlignmentColor: \"#0000ff\",\n          }\n        });\n        cy.edgehandles({\n          handleNodes: '.snapse-node',\n          preview: false,\n          loopAllowed: () => false,\n          edgeType: function (sourceNode, targetNode) {\n            return 'flat'\n            //return sourceNode.edgesTo(targetNode).empty() ? 'flat' : undefined\n          },\n          complete: onEdgeCreate\n        });\n      }\n    }\n    \n  }, [cyRef, headless]);\n  return headless ? (<div id=\"cyHeadless\"></div>) : (\n    <div style={{\n      width: \"100%\",\n      height: \"100%\"\n    }}>\n      <Button className=\"center-graph-button\" variant=\"secondary\" onClick={handleCenterGraph}><AlignCenter />{' '}Center Graph</Button>\n      <CytoscapeComponent\n        cy={setCy}\n        elements={CytoscapeComponent.normalizeElements(elements)}\n        style={{\n          width: \"100%\",\n          height: \"100%\"\n        }}\n        stylesheet={stylesheet} />\n    </div>\n  )\n};\n\nexport default Snapse;","import produce from 'immer'\nexport function parseRule(rule){\n    const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const forgetRe=/(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(0);(0)/\n    const testRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const res = re.exec(rule)\n    const testRes = testRe.exec(rule);\n    const forgetRes = forgetRe.exec(rule);\n    \n    /* if (res) {\n      const [, requires, symbol, consumes, produces, delayStr] = res\n      const delay = parseInt(delayStr, 10)\n      return[requires.length, symbol, consumes.length, produces.length, delay];\n    } */\n    if (testRes) {\n        //console.log(testRes);\n        const [, requires, grouped, symbol, consumes, produces, delayStr] = testRes\n        const delay = parseInt(delayStr, 10)\n        return[requires.length, grouped.length-2, symbol, consumes.length, produces.length, delay];\n    }else if(forgetRes){\n        const [, requires,grouped, symbol,consumes, produces, delayStr] = forgetRes;\n        return [requires.length,grouped.length-2, symbol, consumes.length, 0, 0];\n    }\n    \n\n    return false\n}\nexport function canUseRule(requires, grouped, symbol, spikes){\n    if(symbol == '+'){\n        if(grouped > 0){\n            if ( (spikes - requires) % grouped == 0 && (spikes-requires) >= grouped){\n                return true;\n            }\n            return false;\n        }\n        if (spikes >= requires){\n            return true\n        }\n    }\n    else if(symbol == '*'){\n        if(grouped > 0){\n            if ( (spikes - requires) % grouped == 0){\n                return true;\n            }\n            return false;\n        }\n        if (spikes >= requires-1){\n            return true\n        }\n    }\n    else if(spikes==requires){\n        return true;\n    }\n    return false;\n}\nexport function step(neurons,time,isRandom, handleStartGuidedMode, handleSimulationEnd){\n    const newStates = produce(neurons, draft =>{\n        const spikeAdds = {}\n        const outputTracker = [];\n        var neuronValidRules = {};\n        var shouldEnd = true; \n\n        for (var k in draft){\n            var neuron = draft[k];\n            //choose rule to follow if not working on a rule currently\n            if(!neuron.currentRule && !neuron.isOutput){\n                delete draft[neuron.id].currentRule;\n                //pick a rule\n                var rules = neuron.rules.split(' ');\n                var validRules=[];\n                for (var i=0;i<rules.length;i++){\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(rules[i]);\n                    if(canUseRule(requires,grouped,symbol,neuron.spikes)){\n                        validRules.push(rules[i]);\n                        shouldEnd = false;\n                    }\n                }   \n                if(validRules.length == 1){\n                    draft[neuron.id].currentRule = validRules[0];\n                    draft[neuron.id].chosenRule = validRules[0];\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(validRules[0]);\n                    draft[neuron.id].delay = delay\n                }else if(isRandom == true && validRules.length > 1){\n                    var randomIndex = Math.floor(Math.random() * (validRules.length)) \n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(validRules[randomIndex]);\n                    draft[neuron.id].currentRule = validRules[randomIndex];\n                    draft[neuron.id].chosenRule = validRules[randomIndex];\n                    draft[neuron.id].delay = delay\n                }else if(isRandom == false && validRules.length > 1){ \n                    neuronValidRules[neuron.id] = validRules;\n                }\n                \n            }\n        }\n        if(Object.keys(neuronValidRules).length > 0){\n            //console.log(neuronValidRules);\n            handleStartGuidedMode(neuronValidRules);\n            return;\n        }\n        for (var k in draft){\n            var neuron = draft[k];\n            //work on the rule\n            if(neuron.currentRule){\n                shouldEnd = false;\n                if(neuron.delay >= 0){\n                    let newDelay = neuron.delay.valueOf();\n                    newDelay--;\n                    draft[neuron.id].delay = newDelay;\n                }\n                console.log(neuron.delay)\n                if(neuron.delay < 0){\n                    //consume spikes\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(neuron.currentRule);\n                    let newSpikes = neuron.spikes.valueOf();\n                    newSpikes-=consumes;\n                    draft[neuron.id].spikes = newSpikes;\n                    //send spikes\n                    const neuronOutKeys = neuron.out;\n                    for (let k of neuronOutKeys) {\n                    spikeAdds[k] =\n                        k in spikeAdds ? spikeAdds[k] + produces : produces\n                    }\n                    //resolve rule\n                    delete draft[neuron.id].currentRule;\n                } \n            } else if(neuron.isOutput){\n                outputTracker.push(neuron.id);\n                if (!(k in spikeAdds)) {\n                    spikeAdds[k] = 0\n                  }\n            }else if(neuron.delay==-1){\n                draft[neuron.id].delay=0;\n            }\n        }\n        for (const k in spikeAdds) {\n            //states[k].spikes -= spikeAdds[k]\n            let newSpikes = draft[k].spikes.valueOf();\n            newSpikes+=spikeAdds[k];\n            draft[k].spikes = newSpikes;\n            if(draft[k].isOutput){\n                var newString = `${draft[k].bitstring}${(spikeAdds[k] || '0')}`\n                draft[k].bitstring=newString;\n            }\n        }\n        //console.log(\"should end\", shouldEnd);\n        if(shouldEnd){\n            handleSimulationEnd();\n        }\n\n    })\n    localStorage.setItem(time+'sec',JSON.stringify(newStates));\n    return newStates;\n    \n}\n\nexport function backStep(time){\n    console.log(\"back step automata\");\n    var oldState = JSON.parse(localStorage.getItem(time+'sec'));\n    return oldState;\n    \n}\nexport function initialize(neurons) {\n    const states = {}\n    for (const k in neurons) {\n      const neuron = neurons[k]\n      states[k] = initializeState(neuron)\n    }\n    return states\n}\nexport function initializeState(neuron) {\n    return {\n      spikes: neuron.spikes,\n      delay: 0\n    }\n  }","import { useEffect, useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { useImmer } from 'use-immer';\n\nconst ChooseRuleForm = ({showChooseRuleModal, handleCloseChooseRuleModal,rules, handleChosenRules}) => {\n    const [values, setValues] = useImmer({});\n    useEffect(()=>{\n        setValues(currentValues =>{\n            for (var k in rules){\n                currentValues[k] = rules[k][0];\n            }\n        })\n    },[rules])\n    function onSubmit(e){\n        e.preventDefault();\n        handleChosenRules(values);\n    }\n    function handleSelectChange(event,neuronId){\n        setValues(currentValues =>{\n            for (var k in currentValues){\n                if(k == neuronId){\n                    currentValues[k] = event.target.value;\n                }\n              \n            }\n        })\n    }\n    const GroupRules = (label,options) =>{\n        let neuronOptions = options.map((neuron)=>(\n            <option value={neuron} key={neuron}>{neuron}</option>)\n        )   \n        return(\n            <Form.Group>\n                <Form.Label>{label}</Form.Label>\n                <Form.Control as=\"select\" value={values[label]} onChange={(event)=>handleSelectChange(event, label)}>\n                    {neuronOptions}\n                </Form.Control>\n            </Form.Group>\n            \n        )\n    }\n    var ruleList = Object.keys(rules);\n    var form = [];\n    for (var i=0; i<ruleList.length; i++){\n        console.log(i);\n        form.push(GroupRules(ruleList[i], rules[ruleList[i]], handleSelectChange));\n    }\n    return (\n        <Modal show={showChooseRuleModal} onHide={handleCloseChooseRuleModal} backdrop=\"static\" keyboard={false}>\n            <Modal.Header>\n                <Modal.Title>Choose Rule Form</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form onSubmit={onSubmit}>\n                    {form}\n                <Button type=\"submit\">Submit</Button>\n            </Form>\n\n        </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ChooseRuleForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id:'',\n      startingSpikes: 0,\n      rules: '',\n    }\n  }\n  return {\n    ...state,\n    [event.name]: event.value\n  }\n}\n\nconst initialFormState = {id:\"\", rules:\"\", startingSpikes:0}; \n\nconst NewNodeForm = ({ showNewNodeModal, handleCloseModal, handleNewNode, handleError }) => {\n  const handleClose = () => {\n    handleCloseModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = event => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n\n    if (allRulesValid(formData.rules)) {\n      console.log(\"All rules valid\");\n      handleClose();\n      setSubmitting(true);\n\n      setTimeout(() => {\n        setSubmitting(false);\n        setFormData({\n          reset: true\n        })\n      }, 3000);\n      const newNeuron = {\n        id: newId,\n        position: { x: 100, y: 100 },\n        rules: formData.rules,\n        startingSpikes: parseInt(formData.startingSpikes),\n        delay: 0,\n        spikes: parseInt(formData.startingSpikes),\n        isOutput: false,\n        out: []\n      }\n      handleNewNode(newNeuron);\n    } else {\n      console.log(\"One or more of the rules is invalid\");\n      handleError(\"One or more of the rules is invalid\");\n      handleClose();\n    };\n  }\n\n  return (\n    <Modal show={showNewNodeModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit} data-testid=\"new-node-form\">\n        <Form.Group>\n            <Form.Label htmlFor=\"node-name\">Node Name</Form.Label>\n            <Form.Control required id=\"node-name\" name=\"id\" type=\"text\" placeholder=\"n0\" value={formData.id} onChange={handleChange} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"node-rules\">Node Rules</Form.Label>\n            <Form.Control id=\"node-rules\" required name=\"rules\" type=\"text\" placeholder=\"a/a->a;0 aa/a->a;1\" value={formData.rules} onChange={handleChange} />\n            <Form.Text className=\"text-muted\">\n              Enter valid rules only. Separate each rule with a space.\n              </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"starting-spikes\">Starting Spike Number</Form.Label>\n            <Form.Control id=\"starting-spikes\" required name=\"startingSpikes\" type=\"number\" value={formData.startingSpikes} onChange={handleChange} />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n            </Button> {' '}\n          <Button type=\"submit\" variant=\"primary\" data-testid=\"new-node-submit-button\">\n            Save Changes\n            </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\nexport default NewNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id:'',\n    }\n  }\n  return {\n    ...state,\n    [event.name]: event.value\n  }\n}\n\nconst initialFormState = {id:\"\"}; \n\nconst NewOutputNodeForm = ({ showNewOutputModal, handleCloseNewOutputModal, handleNewOutput, handleError }) => {\n  const handleClose = () => {\n    handleCloseNewOutputModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = event => {\n    console.log(event.target.value);\n    console.log(event.target.name);\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n      handleClose();\n      setSubmitting(true);\n\n      setTimeout(() => {\n        setSubmitting(false);\n        setFormData({\n          reset: true\n        })\n      }, 3000);\n      const newOutput = {\n        id: newId,\n        position: { x: 300, y: 300 },\n        isOutput: true,\n        spikes: 0,\n        bitstring: ' '\n      }\n      handleNewOutput(newOutput);\n  }\n\n  return (\n    <Modal show={showNewOutputModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n        <Form.Group>\n            <Form.Label>Output Node Name</Form.Label>\n            <Form.Control  required name=\"id\" type=\"text\" placeholder=\"n0\" value={formData.id} onChange={handleChange} />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n            </Button> {' '}\n          <Button type=\"submit\" variant=\"primary\">\n            Save Changes\n            </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\nexport default NewOutputNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useEffect, useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\n\nconst EditNodeForm = ({ showEditModal, handleCloseEditModal, handleEditNode, handleError, neurons }) => {\n    const [neuronId, setNeuronId] = useState('');\n    const [rules, setRules] = useState('');\n    const [startingSpikes, setStartingSpikes] = useState(0);\n    const handleClose = () => {\n        handleCloseEditModal();\n    };\n    useEffect(() => {\n        firstUpdate();\n    }, []);\n    function firstUpdate() {\n        var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n            if (!neurons[e].isOutput) r[e] = neurons[e];\n            return r;\n        }, {});\n        var keys = Object.keys(filteredObject);\n        setNeuronId(keys[0]);\n        setRules(filteredObject[keys[0]].rules);\n        setStartingSpikes(filteredObject[keys[0]].startingSpikes);\n    }\n    var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n        if (!neurons[e].isOutput) r[e] = neurons[e];\n        return r;\n    }, {});\n    let neuronOptions = Object.keys(filteredObject).map((neuron) => (\n        <option value={neuron} key={neuron}>{neuron}</option>)\n    )\n    function handleSelectChange(event) {\n        //console.log(event.target.value);\n        let id = event.target.value;\n        setNeuronId(event.target.value);\n        setRules(neurons[id].rules);\n        setStartingSpikes(neurons[id].startingSpikes);\n    }\n    function handleSubmit(event) {\n        event.preventDefault();\n        console.log(neuronId, rules, startingSpikes);\n        if (!neuronId) {\n            handleError(\"Please select a node to edit\");\n            return;\n        }\n        else {\n            if (allRulesValid(rules)) {\n                console.log(\"All rules valid\");\n                handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                    setRules('');\n                    setStartingSpikes(0);\n                }, 3000);\n                handleEditNode(neuronId, rules, startingSpikes);\n            } else {\n                console.log(\"One or more of the rules is invalid\");\n                handleError(\"One or more of the rules is invalid\");\n            };\n        }\n    }\n\n    return (\n        <Modal show={showEditModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Node</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n                    <Form.Group>\n                        <Form.Label>Select node to edit</Form.Label>\n                        <Form.Control required data-testid=\"select-option\" as=\"select\" value={neuronId} onChange={handleSelectChange}>\n                            {neuronOptions}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"node-rules\" >Node Rules</Form.Label>\n                        <Form.Control id=\"node-rules\" required name=\"rules\" type=\"text\" placeholder=\"a/a->a;0 aa/a->a;1\" value={rules} onChange={(event) => { setRules(event.target.value) }} />\n                        <Form.Text className=\"text-muted\">\n                            Enter valid rules only. Separate each rule with a space.\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"startingSpikes\">Starting Spike Number</Form.Label>\n                        <Form.Control id=\"startingSpikes\" required name=\"startingSpikes\" type=\"number\" placeholder=\"0\" value={startingSpikes} onChange={(event) => setStartingSpikes(event.target.value)} />\n                    </Form.Group>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n            </Button> {' '}\n                    <Button type=\"submit\" variant=\"primary\" data-testid=\"edit-node-submit-button\">\n                        Save Changes\n            </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    )\n}\nexport default EditNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\n\nconst DeleteNodeForm = ({ showDeleteModal, handleCloseDeleteModal, handleDeleteNode, handleError, neurons }) => {\n    const [neuronId, setNeuronId] = useState('');\n    const handleClose = () => {\n        handleCloseDeleteModal();\n    };\n    let neuronOptions = Object.keys(neurons).map((neuron)=>(\n        <option value={neuron} key={neuron}>{neuron}</option>)\n    )\n\n    let defaultNeuron = Object.keys(neurons)[0];\n    function handleSelectChange(event){\n        setNeuronId(event.target.value);\n    }\n    function handleSubmit(event) {\n        console.log(\"NeuronId\", neuronId);\n        event.preventDefault();\n        if(neuronId!==''){\n            \n            handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                }, 3000);\n                handleDeleteNode(neuronId);\n        }else{\n            handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                }, 3000);\n                handleDeleteNode(defaultNeuron);\n        }\n    }\n\n    return (\n        <Modal show={showDeleteModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Delete Node</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Select node to delete</Form.Label>\n                        <Form.Control as=\"select\" value={neuronId} onChange={handleSelectChange}>\n                            {neuronOptions}\n                        </Form.Control>\n                    </Form.Group>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n            </Button> {' '}\n                    <Button type=\"submit\" variant=\"danger\">\n                        Delete neuron\n            </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    )\n}\nexport default DeleteNodeForm;","import { Table, Modal } from \"react-bootstrap\"\nimport './ChoiceHistory.css';\nconst ChoiceHistory = ({time,showChoiceHistoryModal,handleCloseHoiceHistoryModal}) =>{\n    var getLatestState = JSON.parse(localStorage.getItem(time-1+\"sec\"));\n    var neuronIds = <td>There are no neurons</td>;\n    if(getLatestState){\n        neuronIds = Object.keys(getLatestState).map((neuron)=>(\n            <th key={neuron}>{neuron}</th>)\n        )\n    }\n    var neuronRows = [];\n    \n    for(var i = 0; i<time; i++){\n        var neuronCells=[];\n        neuronCells.push(TableCell(i));\n        var state = JSON.parse(localStorage.getItem(i+\"sec\"));\n        for(var k in state){\n            if(state[k].chosenRule){\n                neuronCells.push(TableCell(state[k].chosenRule));\n            }else{\n                neuronCells.push(TableCell(\"No chosen rule\"));\n            }\n        }\n        neuronRows.push(TableRow(neuronCells, i));\n        neuronCells = []\n    }\n    return(\n        <Modal show={showChoiceHistoryModal} \n        onHide={handleCloseHoiceHistoryModal} \n        className=\"custom-choice-history-modal\">\n                <Table striped bordered hover data-testid=\"choice-history-table\">\n                    <thead>\n                        <tr>\n                            <th>Time</th>\n                            {neuronIds}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {neuronRows}\n                    </tbody>\n                </Table>\n        </Modal>\n    )\n};\n\nconst TableCell = (content) =>{\n    return(\n        <td>\n            {content}\n        </td>\n    )\n};\n\nconst TableRow = (content,i)=>{\n    return (\n        <tr key={\"time-\"+i}>\n            {content}\n        </tr>\n    )\n}\n\nexport default ChoiceHistory;","import { useEffect, useState } from \"react\"\nimport { Prompt } from \"react-router-dom\";\n\nconst useUnsavedChanges = () =>{\n    const [isDirty, setDirty] = useState(false);\n    const message = \"Are you sure you want to exit without saving your system?\"\n    useEffect(()=>{\n        // function handleUnsavedChanges (){\n        //     console.log(\"isDirty:\" + isDirty);\n        // }\n        window.onbeforeunload = isDirty && (() => message);\n\n        //window.addEventListener(\"beforeunload\", handleUnsavedChanges);\n        return () => {\n            //window.removeEventListener(\"beforeunload\", handleUnsavedChanges);\n            window.onbeforeunload = null;\n        }\n    },[isDirty]);\n    const routerPrompt = <Prompt when={isDirty} message={message} />\n    return [routerPrompt, ()=>setDirty(true), ()=>setDirty(false)];\n}\nexport default useUnsavedChanges;","import './scss/custom.scss';\nimport './App.css';\nimport { slide as Menu } from 'react-burger-menu'\nimport { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { Button, Container, Alert, Row, Col, Form, OverlayTrigger, Tooltip, Dropdown, DropdownButton } from 'react-bootstrap';\nimport { PlayFill, PauseFill, SkipForwardFill, SkipBackwardFill, QuestionCircle, ClockFill, ClockHistory, PlusSquare, Save2 } from 'react-bootstrap-icons';\nimport styled, { css, keyframes } from 'styled-components'\nimport Snapse from \"./components/Snapse/Snapse\";\nimport shortid from 'shortid';\nimport { step, backStep, parseRule } from \"./utils/automata\";\nimport ChooseRuleForm from './components/forms/ChooseRuleForm';\nimport NewNodeForm from './components/forms/NewNodeForm';\nimport NewOutputNodeForm from './components/forms/NewOutputNodeForm';\nimport EditNodeForm from './components/forms/EditNodeForm';\nimport DeleteNodeForm from './components/forms/DeleteNodeForm';\nimport ChoiceHistory from './components/ChoiceHistory/ChoiceHistory';\nimport convert from 'xml-js';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { saveAs } from 'file-saver';\nimport useUnsavedChanges from './components/useUnsavedChanges/useUnsavedChanges';\nimport { original } from 'immer';\nvar options = { compact: true, ignoreComment: true, spaces: 4, sanitize: false };\n\nfunction useKey(key, cb) {\n  const isFocus = useRef(false);\n  const callbackRef = useRef(cb);\n\n  const inputs = document.getElementsByTagName('input');\n\n  // if user is typing in input elements, isFocus = true, and keybinds should not work\n  useEffect(() => {\n    for (let input of inputs) {\n      input.addEventListener('focusin', () => { isFocus.current = true; console.log(\"fOCUS ON ME\"); });\n      input.addEventListener('input', () => { isFocus.current = true; console.log(\"fOCUS ON ME 2\"); });\n      input.addEventListener('focus', () => { isFocus.current = true; console.log(\"fOCUS ON ME 3\"); }, true);\n      input.addEventListener('focusout', () => { isFocus.current = false });\n    }\n  })\n\n  useEffect(() => {\n    callbackRef.current = cb;\n  });\n  useEffect(() => {\n    function debounced(delay, fn) {\n      let timerId;\n      return function (...args) {\n        if (timerId) {\n          clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n          fn(...args);\n          timerId = null;\n        }, delay);\n      }\n    }\n\n    function handleKeyDown(event) {\n      console.log(`isFocus ${isFocus.current}`);\n      if (event.code === key && isFocus.current == false) {\n        console.log(`handleKeyDown isFocus: ${isFocus.current}`)\n        //event.preventDefault();\n        console.log(\"Key pressed: \" + event.code);\n        callbackRef.current(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", (event) => { if (event.code === \"Space\" && isFocus == false) { event.preventDefault(); } });\n    document.addEventListener(\"keydown\", (debounced(300, handleKeyDown)));\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [key]);\n}\n\nfunction App() {\n  const [neurons, setNeurons] = useImmer((window.localStorage.getItem('originalNeurons') != null) ? JSON.parse(window.localStorage.getItem('originalNeurons')) : {\n    n1: {\n      id: \"n1\",\n      position: { x: 50, y: 50 },\n      rules: 'a+/a->a;2',\n      startingSpikes: 1,\n      delay: 0,\n      spikes: 1,\n      isOutput: false,\n      out: ['n2']\n    },\n    n2: {\n      id: \"n2\",\n      position: { x: 200, y: 50 },\n      rules: 'a/a->a;1',\n      startingSpikes: 0,\n      delay: 0,\n      spikes: 0,\n      isOutput: false,\n      out: ['n3']\n    },\n    n3: {\n      id: \"n3\",\n      position: { x: 400, y: 50 },\n      rules: 'a/a->a;0',\n      startingSpikes: 1,\n      delay: 0,\n      spikes: 1,\n      isOutput: false,\n      out: [\"n4\"]\n    },\n    n4: {\n      id: \"n4\",\n      position: { x: 400, y: 200 },\n      isOutput: true,\n      spikes: 0,\n      bitstring: ' '\n    }\n  });\n  const [time, setTime] = useState(0);\n  const [isRandom, setIsRandom] = useState(true);\n  const [fileName, setFileName] = useState('');\n  const [Prompt, setDirty, setPristine] = useUnsavedChanges();\n  const [showNewNodeModal, setShowNewNodeModal] = useState(false);\n  const [showNewOutputModal, setShowNewOutputModal] = useState(false);\n  const [showChooseRuleModal, setShowChooseRuleModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showChoiceHistoryModal, setShowChoiceHistoryModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hasEnded, setHasEnded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [pBar, setPBar] = useState(0);\n  const headless = process.env.NODE_ENV === 'test'\n  const handleClose = () => setShowNewNodeModal(false)\n  const handleShow = () => setShowNewNodeModal(true)\n  const handleCloseNewOutputModal = () => setShowNewOutputModal(false);\n  const handleShowNewOutputModal = () => setShowNewOutputModal(true);\n  const handleCloseEditModal = () => setShowEditModal(false);\n  const handleShowEditModal = () => setShowEditModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseChooseRuleModal = () => setShowChooseRuleModal(false);\n  const handleShowChoiceHistoryModal = () => setShowChoiceHistoryModal(true);\n  const handleCloseHoiceHistoryModal = () => setShowChoiceHistoryModal(false);\n  const handleSimulationEnd = () => {\n    setHasEnded(true);\n    setIsPlaying(false);\n    console.log(\"alert from simulationEnd\");\n    alert(\"Simulation has ended.\");\n  }\n\n  const showError = (text) => {\n    setError(text);\n    setTimeout(() => {\n      setError(\"\");\n    }, 3000);\n  }\n  const handleSave = () => {\n    //Convert JSON Array to string.\n    var wrapper = { content: neurons };\n    //console.log(neurons);\n    var result = convert.json2xml(wrapper, options);\n    //console.log(wrapper);\n    var blob = new Blob([result], { type: \"text/xml;charset=utf-8\", });\n    saveAs(blob, Date().toString() + \"-Neurons.xmp\");\n    setPristine();\n  }\n  const handleLoad = (input) => {\n    let file = input.files[0];\n    setHasEnded(false);\n\n    if (file.type && file.type.indexOf('text/xml') === -1) {\n\n      showError(\"File is not a xml file\");\n      return;\n    }\n    const reader = new FileReader();\n    function nativeType(value) {\n      var nValue = Number(value);\n      if (!isNaN(nValue)) {\n        return nValue;\n      }\n      var bValue = value.toLowerCase();\n      if (bValue === 'true') {\n        return true;\n      } else if (bValue === 'false') {\n        return false;\n      }\n      return value;\n    }\n    var removeJsonTextAttribute = async function (value, parentElement) {\n      try {\n        const parentOfParent = parentElement._parent;\n        const pOpKeys = Object.keys(parentElement._parent);\n        const keyNo = pOpKeys.length;\n        const keyName = pOpKeys[keyNo - 1];\n        const arrOfKey = parentElement._parent[keyName];\n        const arrOfKeyLen = arrOfKey.length;\n        if (arrOfKeyLen > 0) {\n          const arr = arrOfKey;\n          const arrIndex = arrOfKey.length - 1;\n          arr[arrIndex] = value;\n        } else if (keyName == \"out\") {\n          parentElement._parent[keyName] = [value];\n        } else if (keyName == \"bitstring\") {\n          console.log(\"bitstring\");\n          parentElement._parent[keyName] = \"\";\n        }\n        else {\n          parentElement._parent[keyName] = nativeType(value);\n        }\n\n      } catch (e) { }\n    }\n    reader.addEventListener('load', async (event) => {\n      var options = {\n        compact: true,\n        trim: true,\n        ignoreDeclaration: true,\n        ignoreInstruction: true,\n        ignoreAttributes: true,\n        ignoreComment: true,\n        ignoreCdata: true,\n        ignoreDoctype: true,\n        textFn: removeJsonTextAttribute\n      };\n      var result = await convert.xml2js(event.target.result, options);\n      console.log(result.content);\n      await setNeurons(draft => draft = result.content);\n      await setNeurons(draft => {\n        for (var k in draft) {\n          if (draft[k].bitstring) {\n            console.log(draft[k].bitstring);\n            draft[k].bitstring = \" \";\n          }\n          if(draft[k].out){\n            console.log(k, typeof draft[k].out, draft[k].out);\n          }\n        }\n      })\n      window.localStorage.setItem('originalNeurons', JSON.stringify(result.content));\n      setFileName(file.name);\n    });\n    reader.readAsText(file);\n    setTime(0);\n  }\n\n  const onEdgeCreate = async (src, dst) => {\n    console.log(\"newEdge\", src, dst);\n    await setNeurons(draft => {\n      var outCopy = [...draft[src].out];\n      outCopy.push(dst)\n      draft[src].out = outCopy;\n    })\n  }\n  const handleNewPosition = async (position, id) => {\n    setNeurons(draft => {\n      draft[id].position = position;\n    });\n    setDirty(true);\n\n  }\n  async function handleNewNode(newNeuron) {\n    await setNeurons(draft => {\n      draft[newNeuron.id] = newNeuron;\n    })\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n\n  }\n  async function handleNewOutput(newOutput) {\n    await setNeurons(draft => {\n      draft[newOutput.id] = newOutput;\n    });\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  async function handleEditNode(id, rules, spikes) {\n    //console.log(\"handleEditNode\")\n    await setNeurons(draft => {\n      draft[id].startingSpikes = spikes;\n      draft[id].spikes = spikes;\n      draft[id].rules = rules;\n    });\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  async function handleDeleteNode(neuronId) {\n    console.log(\"handleDeleteNode\", neuronId);\n    await setNeurons(draft => {\n      //first delete edges connected to neuron\n      for (var k in draft) {\n        var neuron = draft[k];\n\n        if (!neuron.isOutput) {\n          const neuronOutKeys = neuron.out;\n          let arr = neuron.out.filter(function (item) {\n            return item !== neuronId\n          });\n          draft[k].out = arr;\n        }\n      }\n      //delete neuron\n      delete draft[neuronId];\n    })\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  function handlePlay() {\n    if (!hasEnded) {\n      console.log(`isPlaying before ${isPlaying}`);\n      setIsPlaying(p => !p);\n      console.log(`isPlaying after ${isPlaying}`);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  }\n  const renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Pseudorandom will allow the system to decide which rule will be executed. Unchecking it will let you decide.\n    </Tooltip>\n  );\n  const handleReset = () => {\n    setNeurons(draft => draft = JSON.parse(window.localStorage.getItem('originalNeurons')));\n    setTime(0);\n    setIsPlaying(false);\n    setHasEnded(false);\n    var tempNeurons = window.localStorage.getItem('originalNeurons');\n    window.localStorage.clear();\n    window.localStorage.setItem('originalNeurons', tempNeurons);\n  }\n\n  const [guidedRules, setGuidedRules] = useState({});\n  const handleStartGuidedMode = async (rules) => {\n    await setGuidedRules(rules);\n\n    console.log(rules);\n    setShowChooseRuleModal(true);\n    if (setShowChooseRuleModal) {\n      setIsPlaying(false); //pauses the graph playing while choosing rule\n    }\n  }\n  const handleChosenRules = (data) => {\n    handleCloseChooseRuleModal();\n    setNeurons((draft) => {\n      for (var j in draft) {\n        for (var k in data) {\n          if (j == k) {\n            var [requires, grouped, symbol, consumes, produces, delay] = parseRule(data[k]);\n            draft[j].delay = delay\n            //console.log(data[k]);\n            draft[j].currentRule = data[k];\n            draft[j].chosenRule = data[k];\n          }\n        }\n      }\n    });\n    setIsPlaying(true); // continue playing after choosing rule\n  }\n  const onForward = async () => {\n    if (time == 0) {\n      //copy\n      console.log(\"Time is: \" + time);\n      window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n      console.log(\"Original neurons on time = 1 \", window.localStorage.getItem('originalNeurons'));\n    }\n    if (!hasEnded) {\n      await setNeurons(neurons => step(neurons, time, isRandom, handleStartGuidedMode, handleSimulationEnd));\n      setTime(time => time + 1);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  }\n  const onBackward = async () => {\n    if (time > 1) {\n      var tempTime = time.valueOf();\n      setHasEnded(false);\n      await setNeurons(neurons => backStep(tempTime - 2));\n      await setTime(time => time - 1);\n\n    }\n    else if (time == 1) {\n      handleReset();\n    }\n\n  }\n  const neuronsRef = useRef(neurons)\n  neuronsRef.current = neurons\n  const onIntervalStepRef = useRef(onForward)\n  onIntervalStepRef.current = () => {\n    onForward();\n    setPBar(p => p + 1);\n  }\n  useEffect(() => {\n    if (isPlaying) {\n      var interval = setInterval(() => {\n        onIntervalStepRef.current()\n      }, 3000)\n    }\n    return () => clearInterval(interval);\n  }, [isPlaying, onIntervalStepRef])\n\n  useEffect(() => {\n    if (showChooseRuleModal) {\n      console.log(\"showChooseRuleModal is true\");\n    }\n  }, [])\n\n  // Key Bindings \n  function handleSpace() {\n    console.log(\"Space Pressed\");\n    setIsPlaying(p => !p);\n  }\n\n  function handleRightKey() {\n    console.log(\"Right Key Pressed\");\n    if (!hasEnded) {\n      onIntervalStepRef.current();\n    }\n  }\n\n  function handleLeftKey() {\n    console.log(\"Left Key Pressed\");\n    onBackward();\n  }\n\n  useKey(\"Space\", handleSpace);\n  useKey(\"ArrowLeft\", handleLeftKey);\n  useKey(\"ArrowRight\", handleRightKey);\n\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Container>\n            {error && <Alert variant=\"danger\">\n              {error}\n            </Alert>}\n            <Menu>\n\n              <Form>\n                <Form.File\n                  id=\"custom-file\"\n                  label={fileName ? fileName : \"Load file...\"}\n                  custom\n                  onChange={(e) => { handleLoad(e.target) }}\n                />\n              </Form>\n              <div>\n                <Button variant=\"primary\" disabled={time > 0 ? true : false} onClick={handleSave}><Save2 />{' '}Save</Button>\n              </div>\n              <div>\n                <Button variant=\"primary\" onClick={handleShowChoiceHistoryModal}><ClockHistory />{' '}Choice History</Button>\n              </div>\n              <div>\n                <DropdownButton id=\"file-dropdown\" title=\"Download samples\">\n                  <Dropdown.Item href=\"./samples/3k+3 spiker.xmp\" download>3k+3 Spiker</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/bitadder.xmp\" download>Bitadder</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/increasing comparator.xmp\" download>Increasing Comparator</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/naturally even.xmp\" download>Naturally Even</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/naturally greater one.xmp\" download>Naturally Greater One</Dropdown.Item>\n                </DropdownButton>\n              </div>\n            </Menu>\n            <div>\n              <div style={{ textAlign: \"center\" }}>\n                <h1 style={{ fontWeight: \"700\" }} className=\"text-primary\">WebSnapse</h1>\n              </div>\n              <Row>\n                <Col>\n                  <div>\n\n                    <Form>\n                      <Form.Group id=\"formGridCheckbox\">\n                        <Row>\n                          <Col sm={6}>\n                            <Form.Check type=\"checkbox\"\n                              label=\"Pseudorandom\"\n                              defaultChecked={isRandom}\n                              onChange={() => {\n                                setIsRandom(!isRandom)\n                              }} />\n                          </Col>\n\n                          <Col sm={1} style={{ textAlign: \"left\" }}>\n                            <OverlayTrigger\n                              placement=\"right\"\n                              delay={{ show: 250, hide: 400 }}\n                              overlay={renderTooltip}\n                            >\n                              <QuestionCircle />\n                            </OverlayTrigger>\n                          </Col>\n                        </Row>\n                      </Form.Group>\n                    </Form>\n                    {time == 0 ? <div></div> :\n                      <div style={{ backgroundColor: \"#778beb\", color: \"white\", borderRadius: \"10px\", padding: \"0.5em\" }}>\n                        <ClockFill color=\"white\" size={30} /> <strong>Time:</strong> {time == 0 ? \"Start playing!\" : time}\n                      </div>\n                    }\n\n                  </div>\n                </Col>\n                <Col>\n                  <div className=\"snapse-controls\" style={{ textAlign: \"center\", marginBottom: \"0.8em\" }}>\n                    <Button variant=\"link\" onClick={onBackward}><SkipBackwardFill /></Button>{' '}\n                    <div style={{ display: 'inline-block' }}>\n                      <ProgressBar key={pBar} isPlaying={isPlaying} />\n                      <Button size=\"lg\" className=\"snapse-controls-play\" onClick={handlePlay}>{isPlaying ? <PauseFill /> : <PlayFill />}</Button>\n                    </div> {' '}\n                    <Button variant=\"link\" onClick={() => onForward()}><SkipForwardFill /></Button>{' '}\n\n                  </div>\n                  <div style={{ textAlign: \"center\" }}>\n                    <Dropdown>\n                      <Dropdown.Toggle id=\"dropdown-basic\">\n                        <PlusSquare />{' '}Node Actions\n              </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-primary\" onClick={handleShow} disabled={time > 0 ? true : false}>New Node</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-primary\" onClick={handleShowNewOutputModal} disabled={time > 0 ? true : false}>New Output Node</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-info\" onClick={handleShowEditModal} disabled={time > 0 ? true : false}>Edit</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-danger\" onClick={handleShowDeleteModal} disabled={time > 0 ? true : false}>Delete</Button></Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </div>\n                </Col>\n                <Col style={{ textAlign: \"right\" }}><Button variant=\"danger\" onClick={handleReset}>Restart</Button>{' '}</Col>\n              </Row>\n            </div>\n            <hr />\n            <Snapse\n              neurons={neurons}\n              onEdgeCreate={(src, dst, addedEles) => {\n                onEdgeCreate(src.id(), dst.id())\n                addedEles.remove();\n              }}\n              handleChangePosition={handleNewPosition}\n              headless={headless} />\n            <ChoiceHistory time={time}\n              showChoiceHistoryModal={showChoiceHistoryModal}\n              handleCloseHoiceHistoryModal={handleCloseHoiceHistoryModal} />\n            <NewNodeForm showNewNodeModal={showNewNodeModal}\n              handleCloseModal={handleClose}\n              handleNewNode={handleNewNode}\n              handleError={showError} />\n            <NewOutputNodeForm showNewOutputModal={showNewOutputModal}\n              handleCloseNewOutputModal={handleCloseNewOutputModal}\n              handleNewOutput={handleNewOutput}\n              handleError={showError} />\n            <EditNodeForm showEditModal={showEditModal}\n              handleCloseEditModal={handleCloseEditModal}\n              handleEditNode={handleEditNode}\n              handleError={showError}\n              neurons={neurons} />\n            <DeleteNodeForm showDeleteModal={showDeleteModal}\n              handleCloseDeleteModal={handleCloseDeleteModal}\n              handleDeleteNode={handleDeleteNode}\n              handleError={showError}\n              neurons={neurons}\n            />\n            <ChooseRuleForm showChooseRuleModal={showChooseRuleModal}\n              handleCloseChooseRuleModal={handleCloseChooseRuleModal}\n              rules={guidedRules}\n              handleChosenRules={handleChosenRules}\n            />\n            {Prompt}\n          </Container>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nconst shortening = keyframes`\n  from {\n    transform: scaleX(100%);\n  }\n\n  to {\n    transform: scaleX(0%);\n  }\n`\nconst ProgressBar = styled.div`\n  ${props =>\n    props.isPlaying &&\n    css`\n      animation: ${shortening} 3s linear; \n    `}\n  background-color: #c44569;\n  height: 4px;\n  transform-origin: left center;\n  margin-bottom: 2px;\n`\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport gridGuide from 'cytoscape-grid-guide';\n\ncytoscape.use(edgehandles)\ncytoscape.use(gridGuide)\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}