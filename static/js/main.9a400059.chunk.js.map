{"version":3,"sources":["components/stylesheet.js","components/Snapse/useAnimateEdges.js","utils/helpers.js","components/Snapse/Snapse.js","utils/automata.js","components/forms/ChooseRuleForm.js","components/forms/NewNodeForm.js","components/forms/NewOutputNodeForm.js","components/forms/EditNodeForm.js","components/forms/DeleteNodeForm.js","components/ChoiceHistory/ChoiceHistory.js","components/useUnsavedChanges/useUnsavedChanges.js","App.js","reportWebVitals.js","index.js"],"names":["styles","selector","style","color","content","events","height","shape","width","useAnimateEdges","cyRef","useRef","useEffect","raf","cy","current","animOffset","animate","edges","requestAnimationFrame","cancelAnimationFrame","internal","createOutputNeuron","id","x","y","output","spike","data","rootId","label","includes","substr","indexOf","classes","position","parent","checkValidRule","rule","result","exec","console","log","createEdge","src","dst","c","source","target","allRulesValid","rules","splitRules","split","count","i","length","Snapse","neurons","onEdgeCreate","handleChangePosition","headless","setCy","elements","newId","time","array","nodes","k","element","isOutput","newOutputNode","bitstring","push","newNodes","spikes","delay","replace","out","newEdge","newEdges","convertElements","on","evt","gridGuide","guidelinesStyle","strokeStyle","horizontalDistColor","verticalDistColor","initPosAlignmentColor","edgehandles","handleNodes","preview","loopAllowed","edgeType","sourceNode","targetNode","complete","Button","className","variant","onClick","center","fit","zoom","level","CytoscapeComponent","normalizeElements","stylesheet","parseRule","testRes","forgetRes","requires","grouped","symbol","consumes","produces","delayStr","parseInt","canUseRule","step","isRandom","handleStartGuidedMode","handleSimulationEnd","newStates","produce","draft","spikeAdds","outputTracker","neuronValidRules","shouldEnd","neuron","currentRule","validRules","chosenRule","randomIndex","Math","floor","random","Object","keys","newDelay","valueOf","newSpikes","neuronOutKeys","newString","localStorage","setItem","JSON","stringify","backStep","parse","getItem","ChooseRuleForm","showChooseRuleModal","handleCloseChooseRuleModal","handleChosenRules","useImmer","values","setValues","handleSelectChange","event","neuronId","currentValues","value","GroupRules","options","neuronOptions","map","Form","Group","Label","Control","as","onChange","ruleList","form","Modal","show","onHide","backdrop","keyboard","Header","Title","Body","onSubmit","e","preventDefault","type","formReducer","state","reset","startingSpikes","name","initialFormState","NewNodeForm","showNewNodeModal","handleCloseModal","handleNewNode","handleError","handleClose","useReducer","formData","setFormData","useState","setSubmitting","handleChange","closeButton","shortid","generate","setTimeout","newNeuron","data-testid","htmlFor","required","placeholder","Text","min","NewOutputNodeForm","showNewOutputModal","handleCloseNewOutputModal","handleNewOutput","EditNodeForm","showEditModal","handleCloseEditModal","handleEditNode","setNeuronId","setRules","setStartingSpikes","filteredObject","reduce","r","firstUpdate","DeleteNodeForm","showDeleteModal","handleCloseDeleteModal","handleDeleteNode","defaultNeuron","TableCell","TableRow","ChoiceHistory","showChoiceHistoryModal","handleCloseHoiceHistoryModal","getLatestState","neuronIds","neuronRows","neuronCells","Table","striped","bordered","hover","useUnsavedChanges","isDirty","setDirty","message","window","onbeforeunload","when","compact","ignoreComment","spaces","sanitize","useKey","key","cb","isFocus","callbackRef","inputs","document","getElementsByTagName","input","addEventListener","handleKeyDown","code","fn","timerId","args","clearTimeout","debounced","removeEventListener","shortening","keyframes","ProgressBar","styled","div","props","isPlaying","css","App","n1","n2","n3","n4","setNeurons","setTime","setIsRandom","fileName","setFileName","Prompt","setPristine","setShowNewNodeModal","setShowNewOutputModal","setShowChooseRuleModal","setShowEditModal","setShowChoiceHistoryModal","setShowDeleteModal","setIsPlaying","hasEnded","setHasEnded","error","setError","pBar","setPBar","alert","showError","text","a","outCopy","handleNewPosition","newOutput","arr","filter","item","handleReset","tempNeurons","clear","guidedRules","setGuidedRules","onForward","onBackward","tempTime","onIntervalStepRef","p","interval","setInterval","clearInterval","path","Container","Alert","File","custom","file","files","reader","FileReader","removeJsonTextAttribute","parentElement","pOpKeys","_parent","keyNo","keyName","arrOfKey","arrIndex","nativeType","trim","ignoreDeclaration","ignoreInstruction","ignoreAttributes","ignoreCdata","ignoreDoctype","textFn","convert","xml2js","readAsText","nValue","Number","isNaN","bValue","toLowerCase","handleLoad","disabled","wrapper","json2xml","blob","Blob","saveAs","Date","toString","DropdownButton","title","Dropdown","Item","href","download","textAlign","fontWeight","Row","Col","sm","Check","defaultChecked","OverlayTrigger","placement","hide","overlay","Tooltip","backgroundColor","borderRadius","padding","size","marginBottom","display","Toggle","Menu","addedEles","remove","process","j","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cytoscape","use","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9a400059.chunk.js","sourcesContent":["const styles = [\n    {\n        selector: '.snapse-node, .snapse-output',\n        style: {\n            'font-family': 'Computer Modern',\n            'background-opacity': '0',\n            'padding-top': '0',\n            'border-width': 0,\n            'text-halign': 'left',\n            'text-valign': 'top',\n            color: 'black',\n            content: 'data(label)'\n        }\n    },\n    {\n        selector: '.snapse-node__rules, .snapse-node__output',\n        style: {\n            'font-family': 'Computer Modern',\n            'font-style':'italic',\n            'background-color': 'white',\n            'border-width': 1,\n            events: 'no',\n            'text-wrap': 'wrap',\n            'text-halign': 'center',\n            'text-valign': 'center',\n            'text-wrap':'wrap',\n            content: 'data(label)',\n            height: 150,\n            shape: 'roundrectangle',\n            width: 100\n        }\n    },\n    {\n        selector: '.snapse-node__time, .snapse-node__spike',\n        style: {\n            'font-family': 'Computer Modern',\n            'background-opacity': '0',\n            'text-halign': 'center',\n            'text-valign': 'center',\n            content: 'data(label)',\n            events: 'no',\n            height: 15,\n            shape: 'roundrectangle',\n            width: 50\n        }\n    },\n    /*     {\n            selector: 'node',\n            style: {\n                'background-opacity': '0',\n                'padding-top': '0',\n                'text-halign': 'left',\n                'text-valign': 'top',\n                color: 'black',\n                content: 'data(label)',\n                'border-width': 1,\n                events: 'no',\n                'text-wrap': 'wrap',\n                shape: 'roundrectangle'\n            }\n        }, */\n    {\n        selector: 'edge',\n        style: {\n            'font-family': 'Computer Modern',\n            'curve-style': 'bezier',\n            'target-arrow-shape': 'triangle',\n            'text-background-color': 'white',\n            'text-background-shape': 'rectangle',\n            width: 1\n        }\n    },\n    {\n        selector: '.edge--triggering',\n        style: {\n          'line-color': 'magenta',\n          'line-style': 'dashed',\n          'target-arrow-color': 'magenta',\n          width: 3\n        }\n    }\n]\nexport default styles;\n","import { useEffect, useRef } from 'react'\nimport cytoscapejs from 'cytoscape'\n\nfunction useAnimateEdges() {\n  const cyRef = useRef(null)\n  const setCy = (internal) => {\n    cyRef.current = internal\n  }\n\n  useEffect(() => {\n    const cy = cyRef.current\n    let raf\n    let animOffset = 0\n\n    function animate() {\n      animOffset++\n      if (cy) {\n        cy.edges().animate({\n          style: { 'line-dash-offset': -animOffset }\n        })\n      }\n      raf = requestAnimationFrame(animate)\n    }\n\n    animate()\n\n    return () => {\n      if (raf) {\n        cancelAnimationFrame(raf)\n      }\n    }\n  }, [])\n\n  return [cyRef, setCy]\n}\n\nexport default useAnimateEdges\n","export const createNeuron = (newId, x,\n    y,\n    rules,\n    spike,\n    time) => [{\n        data: {\n            id: newId,\n            label: `${(newId.includes('-'))? newId.substr(0, newId.indexOf('-')) : newId}`\n        },\n        position: { x: x, y: y },\n        classes: 'snapse-node'\n    },\n    {\n        data: {\n            id: newId + '-rules',\n            parent:newId,\n            label: rules.replace(/ /g, \"\\n\").replace(/->/g, \"→\")\n        },\n        position: { x: x, y: y },\n        classes: 'snapse-node__rules'\n    },\n    {\n        data: {\n            id: newId + '-spike',\n            parent: newId,\n            label: spike\n        },\n        position: { x: x, y: y - 60 },\n        classes: 'snapse-node__spike'\n    },\n    {\n        data: {\n            id: newId + '-time',\n            parent: newId,\n            label: time\n        },\n        position: { x: x, y: y + 90 },\n        classes: 'snapse-node__time'\n    }];\nexport const createOutputNeuron = (id,x,y,output,spike) => [\n    {\n        data: { rootId: id, id: `${id}`, label: `${(id.includes('-'))? id.substr(0, id.indexOf('-')) : id}`},\n        classes: 'snapse-output',\n        position: { x: 0, y: 0 }\n      },\n      {\n        data: { rootId: id, id: `${id}-output`, parent: id, label: output },\n        classes: 'snapse-node__output',\n        position: { x, y: y }\n      },\n      {\n        data: { rootId: id, id: `${id}-spike`, parent: id, label: spike },\n        classes: 'snapse-node__spike',\n        position: { x, y: y + 40 }\n      }\n]\nexport const checkValidRule = (rule) =>{\n    const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const testRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const forgetRe=/(a+)(\\+*\\**)\\/(a+)->(0);(0)/\n    var result = testRe.exec(rule) || forgetRe.exec(rule);\n    console.log(result);    \n    return result;\n}\n\nexport const createEdge = (src,dst,c) =>{\n    return {\n        data: {\n          id: src + '-' + dst,\n          source: src,\n          target: dst\n        },\n        classes: c\n      };\n}\n\nexport const allRulesValid = (rules) => {\n    var splitRules = rules.split(\" \");\n    var count = 0;\n    for (var i=0;i<splitRules.length;i++){\n        if(checkValidRule(splitRules[i])!=null){\n            count+=1;\n        }else{\n            console.log(\"invalidRule\", splitRules[i])\n        }\n    }\n    if(count == splitRules.length){\n        return 1;\n    }else{\n        return 0;\n    }\n}\n\nexport const convertElements = elements =>{\n    var array = {\n        nodes: [],\n        edges:[],\n    }\n    for (var k in elements) {\n        var element = elements[k];\n        //console.log(element);\n        if(!element.isOutput){\n            var newNodes = createNeuron(element.id, element.position.x,element.position.y,element.rules, element.spikes, element.delay);\n            array.nodes.push(newNodes[0])\n            array.nodes.push(newNodes[1])\n            array.nodes.push(newNodes[2])\n            array.nodes.push(newNodes[3])\n            \n        }else{\n            var newOutputNode = createOutputNeuron(element.id, element.position.x,element.position.y, element.bitstring, 0);\n            array.nodes.push(newOutputNode[0])\n            array.nodes.push(newOutputNode[1])\n            array.nodes.push(newOutputNode[2])\n        } \n        if(element.out){\n            for (var i=0; i< element.out.length; i++){\n                if (element.delay<0) {\n                    console.log(element.delay)\n                    for (let out of element.out) {\n                      var newEdge = createEdge(element.id, element.out[i],' edge--triggering');\n                      array.edges.push(newEdge);\n                    }\n                }else{\n                    var newEdges = createEdge(element.id, element.out[i],'');\n                    array.edges.push(newEdges);\n                }\n            }\n        }\n    }\n    return array;\n}\n","\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport stylesheet from '../stylesheet'\nimport { Button, Container } from 'react-bootstrap';\nimport useAnimateEdges from './useAnimateEdges';\nimport { useEffect, useMemo } from 'react';\nimport { convertElements } from '../../utils/helpers';\nimport { AlignCenter } from 'react-bootstrap-icons';\n\nconst Snapse = ({ neurons, onEdgeCreate, handleChangePosition, headless }) => {\n  const [cyRef, setCy] = useAnimateEdges()\n  function handleCenterGraph() {\n    const cy = cyRef.current;\n    if (cy) {\n      cy.center();\n      cy.fit();\n      cy.zoom({\n        level: 0.8,\n        position: { x: 100, y: 100 }\n      });\n    }\n  }\n  const elements = convertElements(neurons);\n  useEffect(() => {\n    if (!headless) {\n      const cy = cyRef.current\n      if (cy) {\n        cy.on('mouseup', '.snapse-node, .snapse-output', (evt) => {\n          console.log(\"change position\", evt.target.id())\n          handleChangePosition(evt.position, evt.target.id());\n        })\n        cy.gridGuide({\n          guidelinesStyle: {\n            strokeStyle: \"black\",\n            horizontalDistColor: \"#ff0000\",\n            verticalDistColor: \"green\",\n            initPosAlignmentColor: \"#0000ff\",\n          }\n        });\n        cy.edgehandles({\n          handleNodes: '.snapse-node',\n          preview: false,\n          loopAllowed: () => false,\n          edgeType: function (sourceNode, targetNode) {\n            return 'flat'\n            //return sourceNode.edgesTo(targetNode).empty() ? 'flat' : undefined\n          },\n          complete: onEdgeCreate\n        });\n      }\n    }\n    \n  }, [cyRef, headless]);\n  return headless ? (<div id=\"cyHeadless\"></div>) : (\n    <div style={{\n      width: \"100%\",\n      height: \"100%\"\n    }}>\n      <Button className=\"center-graph-button\" variant=\"secondary\" onClick={handleCenterGraph}><AlignCenter />{' '}Center Graph</Button>\n      <CytoscapeComponent\n        cy={setCy}\n        elements={CytoscapeComponent.normalizeElements(elements)}\n        style={{\n          width: \"100%\",\n          height: \"100%\"\n        }}\n        stylesheet={stylesheet} />\n    </div>\n  )\n};\n\nexport default Snapse;","import produce from 'immer'\nexport function parseRule(rule) {\n    const re = /(a+)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const forgetRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(0);(0)/\n    const testRe = /(a+)(\\(*a*\\)*)(\\+*\\**)\\/(a+)->(a+);([0-9]+)/\n    const res = re.exec(rule)\n    const testRes = testRe.exec(rule);\n    const forgetRes = forgetRe.exec(rule);\n\n    /* if (res) {\n      const [, requires, symbol, consumes, produces, delayStr] = res\n      const delay = parseInt(delayStr, 10)\n      return[requires.length, symbol, consumes.length, produces.length, delay];\n    } */\n    if (testRes) {\n        //console.log(testRes);\n        const [, requires, grouped, symbol, consumes, produces, delayStr] = testRes\n        const delay = parseInt(delayStr, 10)\n        return [requires.length, grouped.length - 2, symbol, consumes.length, produces.length, delay];\n    } else if (forgetRes) {\n        const [, requires, grouped, symbol, consumes, produces, delayStr] = forgetRes;\n        return [requires.length, grouped.length - 2, symbol, consumes.length, 0, 0];\n    }\n\n\n    return false\n}\nexport function canUseRule(requires, grouped, symbol, spikes) {\n    if (symbol == '+') {\n        if (grouped > 0) {\n            if ((spikes - requires) % grouped == 0 && (spikes - requires) >= grouped) {\n                return true;\n            }\n            return false;\n        }\n        if (spikes >= requires) {\n            return true\n        }\n    }\n    else if (symbol == '*') {\n        if (grouped > 0) {\n            if ((spikes - requires) % grouped == 0) {\n                return true;\n            }\n            return false;\n        }\n        if (spikes >= requires - 1) {\n            return true\n        }\n    }\n    else if (spikes == requires) {\n        return true;\n    }\n    return false;\n}\nexport function step(neurons, time, isRandom, handleStartGuidedMode, handleSimulationEnd) {\n    const newStates = produce(neurons, draft => {\n        const spikeAdds = {}\n        const outputTracker = [];\n        var neuronValidRules = {};\n        var shouldEnd = true;\n\n        for (var k in draft) {\n            var neuron = draft[k];\n            //choose rule to follow if not working on a rule currently\n            if (!neuron.currentRule && !neuron.isOutput) {\n                delete draft[neuron.id].currentRule;\n                //pick a rule\n                var rules = neuron.rules.split(' ');\n                var validRules = [];\n                for (var i = 0; i < rules.length; i++) {\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(rules[i]);\n                    if (canUseRule(requires, grouped, symbol, neuron.spikes)) {\n                        validRules.push(rules[i]);\n                        shouldEnd = false;\n                    }\n                }\n                if (validRules.length == 1) {\n                    draft[neuron.id].currentRule = validRules[0];\n                    draft[neuron.id].chosenRule = validRules[0];\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(validRules[0]);\n                    draft[neuron.id].delay = delay\n                } else if (isRandom == true && validRules.length > 1) {\n                    var randomIndex = Math.floor(Math.random() * (validRules.length))\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(validRules[randomIndex]);\n                    draft[neuron.id].currentRule = validRules[randomIndex];\n                    draft[neuron.id].chosenRule = validRules[randomIndex];\n                    draft[neuron.id].delay = delay\n                } else if (isRandom == false && validRules.length > 1) {\n                    neuronValidRules[neuron.id] = validRules;\n                }\n\n            }\n        }\n        if (Object.keys(neuronValidRules).length > 0) {\n            //console.log(neuronValidRules);\n            handleStartGuidedMode(neuronValidRules);\n            return;\n        }\n        for (var k in draft) {\n            var neuron = draft[k];\n            //work on the rule\n            if (neuron.currentRule) {\n                shouldEnd = false;\n                if (neuron.delay >= 0) {\n                    let newDelay = neuron.delay.valueOf();\n                    newDelay--;\n                    draft[neuron.id].delay = newDelay;\n                }\n                console.log(neuron.delay)\n                if (neuron.delay < 0) {\n                    //consume spikes\n                    var [requires, grouped, symbol, consumes, produces, delay] = parseRule(neuron.currentRule);\n                    let newSpikes = neuron.spikes.valueOf();\n                    newSpikes -= consumes;\n                    draft[neuron.id].spikes = newSpikes;\n                    //send spikes\n                    if (neuron.out) {\n                        const neuronOutKeys = neuron.out;\n                        for (let k of neuronOutKeys) {\n                            spikeAdds[k] =\n                                k in spikeAdds ? spikeAdds[k] + produces : produces\n                        }\n                    }\n\n                    //resolve rule\n                    delete draft[neuron.id].currentRule;\n                }\n            } else if (neuron.isOutput) {\n                outputTracker.push(neuron.id);\n                if (!(k in spikeAdds)) {\n                    spikeAdds[k] = 0\n                }\n            } else if (neuron.delay == -1) {\n                draft[neuron.id].delay = 0;\n            }\n        }\n        for (const k in spikeAdds) {\n            //states[k].spikes -= spikeAdds[k]\n            let newSpikes = draft[k].spikes.valueOf();\n            newSpikes += spikeAdds[k];\n            draft[k].spikes = newSpikes;\n            if (draft[k].isOutput) {\n                var newString = `${draft[k].bitstring}${(spikeAdds[k] || '0')}`\n                draft[k].bitstring = newString;\n            }\n        }\n        //console.log(\"should end\", shouldEnd);\n        if (shouldEnd) {\n            handleSimulationEnd();\n        }\n\n    })\n    localStorage.setItem(time + 'sec', JSON.stringify(newStates));\n    return newStates;\n\n}\n\nexport function backStep(time) {\n    console.log(\"back step automata\");\n    var oldState = JSON.parse(localStorage.getItem(time + 'sec'));\n    return oldState;\n\n}\nexport function initialize(neurons) {\n    const states = {}\n    for (const k in neurons) {\n        const neuron = neurons[k]\n        states[k] = initializeState(neuron)\n    }\n    return states\n}\nexport function initializeState(neuron) {\n    return {\n        spikes: neuron.spikes,\n        delay: 0\n    }\n}","import { useEffect, useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { useImmer } from 'use-immer';\n\nconst ChooseRuleForm = ({showChooseRuleModal, handleCloseChooseRuleModal,rules, handleChosenRules}) => {\n    const [values, setValues] = useImmer({});\n    useEffect(()=>{\n        setValues(currentValues =>{\n            for (var k in rules){\n                currentValues[k] = rules[k][0];\n            }\n        })\n    },[rules])\n    function onSubmit(e){\n        e.preventDefault();\n        handleChosenRules(values);\n    }\n    function handleSelectChange(event,neuronId){\n        setValues(currentValues =>{\n            for (var k in currentValues){\n                if(k == neuronId){\n                    currentValues[k] = event.target.value;\n                }\n              \n            }\n        })\n    }\n    const GroupRules = (label,options) =>{\n        let neuronOptions = options.map((neuron)=>(\n            <option value={neuron} key={neuron}>{neuron}</option>)\n        )   \n        return(\n            <Form.Group>\n                <Form.Label>{label}</Form.Label>\n                <Form.Control as=\"select\" value={values[label]} onChange={(event)=>handleSelectChange(event, label)}>\n                    {neuronOptions}\n                </Form.Control>\n            </Form.Group>\n            \n        )\n    }\n    var ruleList = Object.keys(rules);\n    var form = [];\n    for (var i=0; i<ruleList.length; i++){\n        console.log(i);\n        form.push(GroupRules(ruleList[i], rules[ruleList[i]], handleSelectChange));\n    }\n    return (\n        <Modal show={showChooseRuleModal} onHide={handleCloseChooseRuleModal} backdrop=\"static\" keyboard={false}>\n            <Modal.Header>\n                <Modal.Title>Choose Rule Form</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form onSubmit={onSubmit}>\n                    {form}\n                <Button type=\"submit\">Submit</Button>\n            </Form>\n\n        </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default ChooseRuleForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id:'',\n      startingSpikes: 0,\n      rules: '',\n    }\n  }\n  return {\n    ...state,\n    [event.name]: event.value\n  }\n}\n\nconst initialFormState = {id:\"\", rules:\"\", startingSpikes:0}; \n\nconst NewNodeForm = ({ showNewNodeModal, handleCloseModal, handleNewNode, handleError }) => {\n  const handleClose = () => {\n    handleCloseModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = event => {\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n\n    if (allRulesValid(formData.rules)) {\n      console.log(\"All rules valid\");\n      handleClose();\n      setSubmitting(true);\n\n      setTimeout(() => {\n        setSubmitting(false);\n        setFormData({\n          reset: true\n        })\n      }, 3000);\n      const newNeuron = {\n        id: newId,\n        position: { x: 100, y: 100 },\n        rules: formData.rules,\n        startingSpikes: parseInt(formData.startingSpikes),\n        delay: 0,\n        spikes: parseInt(formData.startingSpikes),\n        isOutput: false,\n        out: []\n      }\n      handleNewNode(newNeuron);\n    } else {\n      console.log(\"One or more of the rules is invalid\");\n      handleError(\"One or more of the rules is invalid\");\n      handleClose();\n    };\n  }\n\n  return (\n    <Modal show={showNewNodeModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit} data-testid=\"new-node-form\">\n        <Form.Group>\n            <Form.Label htmlFor=\"node-name\">Node Name</Form.Label>\n            <Form.Control required id=\"node-name\" name=\"id\" type=\"text\" placeholder=\"n0\" value={formData.id} onChange={handleChange} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"node-rules\">Node Rules</Form.Label>\n            <Form.Control id=\"node-rules\" required name=\"rules\" type=\"text\" placeholder=\"a/a->a;0 aa/a->a;1\" value={formData.rules} onChange={handleChange} />\n            <Form.Text className=\"text-muted\">\n              Enter valid rules only. Separate each rule with a space.\n              </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label htmlFor=\"starting-spikes\">Starting Spike Number</Form.Label>\n            <Form.Control id=\"starting-spikes\" required name=\"startingSpikes\" type=\"number\" min=\"0\" value={formData.startingSpikes} onChange={handleChange} />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n            </Button> {' '}\n          <Button type=\"submit\" variant=\"primary\" data-testid=\"new-node-submit-button\">\n            Save Changes\n            </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\nexport default NewNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\nimport shortid from \"shortid\";\n\nconst formReducer = (state, event) => {\n  if (event.reset) {\n    return {\n      id:'',\n    }\n  }\n  return {\n    ...state,\n    [event.name]: event.value\n  }\n}\n\nconst initialFormState = {id:\"\"}; \n\nconst NewOutputNodeForm = ({ showNewOutputModal, handleCloseNewOutputModal, handleNewOutput, handleError }) => {\n  const handleClose = () => {\n    handleCloseNewOutputModal();\n  };\n  const [formData, setFormData] = useReducer(formReducer, initialFormState);\n  const [submitting, setSubmitting] = useState(false);\n  const handleChange = event => {\n    console.log(event.target.value);\n    console.log(event.target.name);\n    setFormData({\n      name: event.target.name,\n      value: event.target.value,\n    });\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    let newId = `${formData.id}-${shortid.generate()}`;\n      handleClose();\n      setSubmitting(true);\n\n      setTimeout(() => {\n        setSubmitting(false);\n        setFormData({\n          reset: true\n        })\n      }, 3000);\n      const newOutput = {\n        id: newId,\n        position: { x: 300, y: 300 },\n        isOutput: true,\n        spikes: 0,\n        bitstring: ' '\n      }\n      handleNewOutput(newOutput);\n  }\n\n  return (\n    <Modal show={showNewOutputModal} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create New Node</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n        <Form.Group>\n            <Form.Label>Output Node Name</Form.Label>\n            <Form.Control  required name=\"id\" type=\"text\" placeholder=\"n0\" value={formData.id} onChange={handleChange} />\n          </Form.Group>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n            </Button> {' '}\n          <Button type=\"submit\" variant=\"primary\">\n            Save Changes\n            </Button>\n        </Form>\n      </Modal.Body>\n    </Modal>\n  )\n}\nexport default NewOutputNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useEffect, useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\n\nconst EditNodeForm = ({ showEditModal, handleCloseEditModal, handleEditNode, handleError, neurons }) => {\n    const [neuronId, setNeuronId] = useState('');\n    const [rules, setRules] = useState('');\n    const [startingSpikes, setStartingSpikes] = useState(0);\n    const handleClose = () => {\n        handleCloseEditModal();\n    };\n    useEffect(() => {\n        firstUpdate();\n    }, []);\n    function firstUpdate() {\n        var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n            if (!neurons[e].isOutput) r[e] = neurons[e];\n            return r;\n        }, {});\n        var keys = Object.keys(filteredObject);\n        setNeuronId(keys[0]);\n        setRules(filteredObject[keys[0]].rules);\n        setStartingSpikes(filteredObject[keys[0]].startingSpikes);\n    }\n    var filteredObject = Object.keys(neurons).reduce(function (r, e) {\n        if (!neurons[e].isOutput) r[e] = neurons[e];\n        return r;\n    }, {});\n    let neuronOptions = Object.keys(filteredObject).map((neuron) => (\n        <option value={neuron} key={neuron}>{neuron}</option>)\n    )\n    function handleSelectChange(event) {\n        //console.log(event.target.value);\n        let id = event.target.value;\n        setNeuronId(event.target.value);\n        setRules(neurons[id].rules);\n        setStartingSpikes(neurons[id].startingSpikes);\n    }\n    function handleSubmit(event) {\n        event.preventDefault();\n        console.log(neuronId, rules, startingSpikes);\n        if (!neuronId) {\n            handleError(\"Please select a node to edit\");\n            return;\n        }\n        else {\n            if (allRulesValid(rules)) {\n                console.log(\"All rules valid\");\n                handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                    setRules('');\n                    setStartingSpikes(0);\n                }, 3000);\n                handleEditNode(neuronId, rules, startingSpikes);\n            } else {\n                console.log(\"One or more of the rules is invalid\");\n                handleError(\"One or more of the rules is invalid\");\n            };\n        }\n    }\n\n    return (\n        <Modal show={showEditModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit Node</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit} data-testid=\"edit-node-form\">\n                    <Form.Group>\n                        <Form.Label>Select node to edit</Form.Label>\n                        <Form.Control required data-testid=\"select-option\" as=\"select\" value={neuronId} onChange={handleSelectChange}>\n                            {neuronOptions}\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"node-rules\" >Node Rules</Form.Label>\n                        <Form.Control id=\"node-rules\" required name=\"rules\" type=\"text\" placeholder=\"a/a->a;0 aa/a->a;1\" value={rules} onChange={(event) => { setRules(event.target.value) }} />\n                        <Form.Text className=\"text-muted\">\n                            Enter valid rules only. Separate each rule with a space.\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"startingSpikes\">Starting Spike Number</Form.Label>\n                        <Form.Control id=\"startingSpikes\" required name=\"startingSpikes\" type=\"number\" min=\"0\" placeholder=\"0\" value={startingSpikes} onChange={(event) => setStartingSpikes(event.target.value)} />\n                    </Form.Group>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n            </Button> {' '}\n                    <Button type=\"submit\" variant=\"primary\" data-testid=\"edit-node-submit-button\">\n                        Save Changes\n            </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    )\n}\nexport default EditNodeForm;","import { Button, Form, Modal } from 'react-bootstrap';\nimport { useReducer, useState } from 'react';\nimport { allRulesValid } from \"../../utils/helpers\";\n\nconst DeleteNodeForm = ({ showDeleteModal, handleCloseDeleteModal, handleDeleteNode, handleError, neurons }) => {\n    const [neuronId, setNeuronId] = useState('');\n    const handleClose = () => {\n        handleCloseDeleteModal();\n    };\n    let neuronOptions = Object.keys(neurons).map((neuron)=>(\n        <option value={neuron} key={neuron}>{neuron}</option>)\n    )\n\n    let defaultNeuron = Object.keys(neurons)[0];\n    function handleSelectChange(event){\n        setNeuronId(event.target.value);\n    }\n    function handleSubmit(event) {\n        console.log(\"NeuronId\", neuronId);\n        event.preventDefault();\n        if(neuronId!==''){\n            \n            handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                }, 3000);\n                handleDeleteNode(neuronId);\n        }else{\n            handleClose();\n                setTimeout(() => {\n                    setNeuronId('');\n                }, 3000);\n                handleDeleteNode(defaultNeuron);\n        }\n    }\n\n    return (\n        <Modal show={showDeleteModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Delete Node</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Select node to delete</Form.Label>\n                        <Form.Control as=\"select\" value={neuronId} onChange={handleSelectChange}>\n                            {neuronOptions}\n                        </Form.Control>\n                    </Form.Group>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n            </Button> {' '}\n                    <Button type=\"submit\" variant=\"danger\">\n                        Delete neuron\n            </Button>\n                </Form>\n            </Modal.Body>\n        </Modal>\n    )\n}\nexport default DeleteNodeForm;","import { Table, Modal } from \"react-bootstrap\"\nimport './ChoiceHistory.css';\nconst ChoiceHistory = ({time,showChoiceHistoryModal,handleCloseHoiceHistoryModal}) =>{\n    var getLatestState = JSON.parse(localStorage.getItem(time-1+\"sec\"));\n    var neuronIds = <td>There are no neurons</td>;\n    if(getLatestState){\n        neuronIds = Object.keys(getLatestState).map((neuron)=>(\n            <th key={neuron}>{neuron}</th>)\n        )\n    }\n    var neuronRows = [];\n    \n    for(var i = 0; i<time; i++){\n        var neuronCells=[];\n        neuronCells.push(TableCell(i));\n        var state = JSON.parse(localStorage.getItem(i+\"sec\"));\n        for(var k in state){\n            if(state[k].chosenRule){\n                neuronCells.push(TableCell(state[k].chosenRule));\n            }else{\n                neuronCells.push(TableCell(\"No chosen rule\"));\n            }\n        }\n        neuronRows.push(TableRow(neuronCells, i));\n        neuronCells = []\n    }\n    return(\n        <Modal show={showChoiceHistoryModal} \n        onHide={handleCloseHoiceHistoryModal} \n        className=\"custom-choice-history-modal\">\n                <Table striped bordered hover data-testid=\"choice-history-table\">\n                    <thead>\n                        <tr>\n                            <th>Time</th>\n                            {neuronIds}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {neuronRows}\n                    </tbody>\n                </Table>\n        </Modal>\n    )\n};\n\nconst TableCell = (content) =>{\n    return(\n        <td>\n            {content}\n        </td>\n    )\n};\n\nconst TableRow = (content,i)=>{\n    return (\n        <tr key={\"time-\"+i}>\n            {content}\n        </tr>\n    )\n}\n\nexport default ChoiceHistory;","import { useEffect, useState } from \"react\"\nimport { Prompt } from \"react-router-dom\";\n\nconst useUnsavedChanges = () =>{\n    const [isDirty, setDirty] = useState(false);\n    const message = \"Are you sure you want to exit without saving your system?\"\n    useEffect(()=>{\n        // function handleUnsavedChanges (){\n        //     console.log(\"isDirty:\" + isDirty);\n        // }\n        window.onbeforeunload = isDirty && (() => message);\n\n        //window.addEventListener(\"beforeunload\", handleUnsavedChanges);\n        return () => {\n            //window.removeEventListener(\"beforeunload\", handleUnsavedChanges);\n            window.onbeforeunload = null;\n        }\n    },[isDirty]);\n    const routerPrompt = <Prompt when={isDirty} message={message} />\n    return [routerPrompt, ()=>setDirty(true), ()=>setDirty(false)];\n}\nexport default useUnsavedChanges;","import './scss/custom.scss';\nimport './App.css';\nimport { slide as Menu } from 'react-burger-menu'\nimport { useState, useEffect, useRef } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { Button, Container, Alert, Row, Col, Form, OverlayTrigger, Tooltip, Dropdown, DropdownButton } from 'react-bootstrap';\nimport { PlayFill, PauseFill, SkipForwardFill, SkipBackwardFill, QuestionCircle, ClockFill, ClockHistory, PlusSquare, Save2 } from 'react-bootstrap-icons';\nimport styled, { css, keyframes } from 'styled-components'\nimport Snapse from \"./components/Snapse/Snapse\";\nimport shortid from 'shortid';\nimport { step, backStep, parseRule } from \"./utils/automata\";\nimport ChooseRuleForm from './components/forms/ChooseRuleForm';\nimport NewNodeForm from './components/forms/NewNodeForm';\nimport NewOutputNodeForm from './components/forms/NewOutputNodeForm';\nimport EditNodeForm from './components/forms/EditNodeForm';\nimport DeleteNodeForm from './components/forms/DeleteNodeForm';\nimport ChoiceHistory from './components/ChoiceHistory/ChoiceHistory';\nimport convert from 'xml-js';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { saveAs } from 'file-saver';\nimport useUnsavedChanges from './components/useUnsavedChanges/useUnsavedChanges';\nimport { original } from 'immer';\nvar options = { compact: true, ignoreComment: true, spaces: 4, sanitize: false };\n\nfunction useKey(key, cb) {\n  const isFocus = useRef(false);\n  const callbackRef = useRef(cb);\n\n  const inputs = document.getElementsByTagName('input');\n\n  // if user is typing in input elements, isFocus = true, and keybinds should not work\n  useEffect(() => {\n    for (let input of inputs) {\n      input.addEventListener('focusin', () => { isFocus.current = true; console.log(\"fOCUS ON ME\"); });\n      input.addEventListener('input', () => { isFocus.current = true; console.log(\"fOCUS ON ME 2\"); });\n      input.addEventListener('focus', () => { isFocus.current = true; console.log(\"fOCUS ON ME 3\"); }, true);\n      input.addEventListener('focusout', () => { isFocus.current = false });\n    }\n  })\n\n  useEffect(() => {\n    callbackRef.current = cb;\n  });\n  useEffect(() => {\n    function debounced(delay, fn) {\n      let timerId;\n      return function (...args) {\n        if (timerId) {\n          clearTimeout(timerId);\n        }\n        timerId = setTimeout(() => {\n          fn(...args);\n          timerId = null;\n        }, delay);\n      }\n    }\n\n    function handleKeyDown(event) {\n      console.log(`isFocus ${isFocus.current}`);\n      if (event.code === key && isFocus.current == false) {\n        console.log(`handleKeyDown isFocus: ${isFocus.current}`)\n        //event.preventDefault();\n        console.log(\"Key pressed: \" + event.code);\n        callbackRef.current(event);\n      }\n    }\n\n    document.addEventListener(\"keydown\", (event) => { if (event.code === \"Space\" && isFocus == false) { event.preventDefault(); } });\n    document.addEventListener(\"keydown\", (debounced(300, handleKeyDown)));\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [key]);\n}\n\nfunction App() {\n  const [neurons, setNeurons] = useImmer((window.localStorage.getItem('originalNeurons') != null) ? JSON.parse(window.localStorage.getItem('originalNeurons')) : {\n    n1: {\n      id: \"n1\",\n      position: { x: 50, y: 50 },\n      rules: 'a+/a->a;2',\n      startingSpikes: 1,\n      delay: 0,\n      spikes: 1,\n      isOutput: false,\n      out: ['n2']\n    },\n    n2: {\n      id: \"n2\",\n      position: { x: 200, y: 50 },\n      rules: 'a/a->a;1',\n      startingSpikes: 0,\n      delay: 0,\n      spikes: 0,\n      isOutput: false,\n      out: ['n3']\n    },\n    n3: {\n      id: \"n3\",\n      position: { x: 400, y: 50 },\n      rules: 'a/a->a;0',\n      startingSpikes: 1,\n      delay: 0,\n      spikes: 1,\n      isOutput: false,\n      out: [\"n4\"]\n    },\n    n4: {\n      id: \"n4\",\n      position: { x: 400, y: 200 },\n      isOutput: true,\n      spikes: 0,\n      bitstring: ' '\n    }\n  });\n  const [time, setTime] = useState(0);\n  const [isRandom, setIsRandom] = useState(true);\n  const [fileName, setFileName] = useState('');\n  const [Prompt, setDirty, setPristine] = useUnsavedChanges();\n  const [showNewNodeModal, setShowNewNodeModal] = useState(false);\n  const [showNewOutputModal, setShowNewOutputModal] = useState(false);\n  const [showChooseRuleModal, setShowChooseRuleModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [showChoiceHistoryModal, setShowChoiceHistoryModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hasEnded, setHasEnded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [pBar, setPBar] = useState(0);\n  const headless = process.env.NODE_ENV === 'test'\n  const handleClose = () => setShowNewNodeModal(false)\n  const handleShow = () => setShowNewNodeModal(true)\n  const handleCloseNewOutputModal = () => setShowNewOutputModal(false);\n  const handleShowNewOutputModal = () => setShowNewOutputModal(true);\n  const handleCloseEditModal = () => setShowEditModal(false);\n  const handleShowEditModal = () => setShowEditModal(true);\n  const handleCloseDeleteModal = () => setShowDeleteModal(false);\n  const handleShowDeleteModal = () => setShowDeleteModal(true);\n  const handleCloseChooseRuleModal = () => setShowChooseRuleModal(false);\n  const handleShowChoiceHistoryModal = () => setShowChoiceHistoryModal(true);\n  const handleCloseHoiceHistoryModal = () => setShowChoiceHistoryModal(false);\n  const handleSimulationEnd = () => {\n    setHasEnded(true);\n    setIsPlaying(false);\n    console.log(\"alert from simulationEnd\");\n    alert(\"Simulation has ended.\");\n  }\n\n  const showError = (text) => {\n    setError(text);\n    setTimeout(() => {\n      setError(\"\");\n    }, 3000);\n  }\n  const handleSave = () => {\n    //Convert JSON Array to string.\n    var wrapper = { content: neurons };\n    //console.log(neurons);\n    var result = convert.json2xml(wrapper, options);\n    //console.log(wrapper);\n    var blob = new Blob([result], { type: \"text/xml;charset=utf-8\", });\n    saveAs(blob, Date().toString() + \"-Neurons.xmp\");\n    setPristine();\n  }\n  const handleLoad = (input) => {\n    let file = input.files[0];\n    setHasEnded(false);\n\n    if (file.type && file.type.indexOf('text/xml') === -1) {\n\n      showError(\"File is not a xml file\");\n      return;\n    }\n    const reader = new FileReader();\n    function nativeType(value) {\n      var nValue = Number(value);\n      if (!isNaN(nValue)) {\n        return nValue;\n      }\n      var bValue = value.toLowerCase();\n      if (bValue === 'true') {\n        return true;\n      } else if (bValue === 'false') {\n        return false;\n      }\n      return value;\n    }\n    var removeJsonTextAttribute = async function (value, parentElement) {\n      try {\n        const pOpKeys = Object.keys(parentElement._parent);\n        const keyNo = pOpKeys.length;\n        const keyName = pOpKeys[keyNo - 1];\n        const arrOfKey = parentElement._parent[keyName];\n        const arrOfKeyLen = arrOfKey.length;\n        if (arrOfKeyLen > 0) {\n          const arr = arrOfKey;\n          const arrIndex = arrOfKey.length - 1;\n          arr[arrIndex] = value;\n        } else if (keyName == \"out\") {\n          parentElement._parent[keyName] = [value];\n        } else if (keyName == \"bitstring\") {\n          console.log(\"bitstring\");\n          parentElement._parent[keyName] = \"\";\n        }\n        else {\n          parentElement._parent[keyName] = nativeType(value);\n        }\n\n      } catch (e) { }\n    }\n    reader.addEventListener('load', async (event) => {\n      var options = {\n        compact: true,\n        trim: true,\n        ignoreDeclaration: true,\n        ignoreInstruction: true,\n        ignoreAttributes: true,\n        ignoreComment: true,\n        ignoreCdata: true,\n        ignoreDoctype: true,\n        textFn: removeJsonTextAttribute\n      };\n      var result = await convert.xml2js(event.target.result, options);\n      await setNeurons(draft => draft = result.content);\n      await setNeurons(draft => {\n        for (var k in draft) {\n          if (draft[k].bitstring) {\n            console.log(draft[k].bitstring);\n            draft[k].bitstring = \" \";\n          }\n          if(draft[k].out){\n            console.log(k, typeof draft[k].out, draft[k].out);\n          }\n        }\n      })\n      window.localStorage.setItem('originalNeurons', JSON.stringify(result.content));\n      setFileName(file.name);\n    });\n    reader.readAsText(file);\n    setTime(0);\n  }\n\n  const onEdgeCreate = async (src, dst) => {\n    console.log(\"newEdge\", src, dst);\n    await setNeurons(draft => {\n      var outCopy = [...draft[src].out];\n      outCopy.push(dst)\n      draft[src].out = outCopy;\n    })\n  }\n  const handleNewPosition = async (position, id) => {\n    setNeurons(draft => {\n      draft[id].position = position;\n    });\n    setDirty(true);\n\n  }\n  async function handleNewNode(newNeuron) {\n    await setNeurons(draft => {\n      draft[newNeuron.id] = newNeuron;\n    })\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n\n  }\n  async function handleNewOutput(newOutput) {\n    await setNeurons(draft => {\n      draft[newOutput.id] = newOutput;\n    });\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  async function handleEditNode(id, rules, spikes) {\n    //console.log(\"handleEditNode\")\n    await setNeurons(draft => {\n      draft[id].startingSpikes = spikes;\n      draft[id].spikes = spikes;\n      draft[id].rules = rules;\n    });\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  async function handleDeleteNode(neuronId) {\n    console.log(\"handleDeleteNode\", neuronId);\n    await setNeurons(draft => {\n      \n      for (var k in draft) {\n        //first delete edges connected to neuron\n        var neuron = draft[k];\n        if (!neuron.isOutput && neuron.out) {\n          //const neuronOutKeys = neuron.out;\n          let arr = neuron.out.filter(function (item) {\n            return item !== neuronId\n          });\n          draft[k].out = arr;\n        }\n      }\n      //delete neuron\n      delete draft[neuronId];\n    })\n    setDirty(true);\n    window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n  }\n  function handlePlay() {\n    if (!hasEnded) {\n      console.log(`isPlaying before ${isPlaying}`);\n      setIsPlaying(p => !p);\n      console.log(`isPlaying after ${isPlaying}`);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  }\n  const renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Pseudorandom will allow the system to decide which rule will be executed. Unchecking it will let you decide.\n    </Tooltip>\n  );\n  const handleReset = () => {\n    setNeurons(draft => draft = JSON.parse(window.localStorage.getItem('originalNeurons')));\n    setTime(0);\n    setIsPlaying(false);\n    setHasEnded(false);\n    var tempNeurons = window.localStorage.getItem('originalNeurons');\n    window.localStorage.clear();\n    window.localStorage.setItem('originalNeurons', tempNeurons);\n  }\n\n  const [guidedRules, setGuidedRules] = useState({});\n  const handleStartGuidedMode = async (rules) => {\n    await setGuidedRules(rules);\n    setShowChooseRuleModal(true);\n    if (setShowChooseRuleModal) {\n      setIsPlaying(false); //pauses the graph playing while choosing rule\n    }\n  }\n  const handleChosenRules = (data) => {\n    handleCloseChooseRuleModal();\n    setNeurons((draft) => {\n      for (var j in draft) {\n        for (var k in data) {\n          if (j == k) {\n            var [requires, grouped, symbol, consumes, produces, delay] = parseRule(data[k]);\n            draft[j].delay = delay\n            //console.log(data[k]);\n            draft[j].currentRule = data[k];\n            draft[j].chosenRule = data[k];\n          }\n        }\n      }\n    });\n    setIsPlaying(true); // continue playing after choosing rule\n  }\n  const onForward = async () => {\n    if (time == 0) {\n      //copy\n      console.log(\"Time is: \" + time);\n      window.localStorage.setItem('originalNeurons', JSON.stringify(JSON.parse(JSON.stringify(neurons))));\n      console.log(\"Original neurons on time = 1 \", window.localStorage.getItem('originalNeurons'));\n    }\n    if (!hasEnded) {\n      await setNeurons(neurons => step(neurons, time, isRandom, handleStartGuidedMode, handleSimulationEnd));\n      setTime(time => time + 1);\n    } else {\n      alert(\"Simulation has ended.\");\n    }\n  }\n  const onBackward = async () => {\n    if (time > 1) {\n      var tempTime = time.valueOf();\n      setHasEnded(false);\n      await setNeurons(neurons => backStep(tempTime - 2));\n      await setTime(time => time - 1);\n\n    }\n    else if (time == 1) {\n      handleReset();\n    }\n\n  }\n  const neuronsRef = useRef(neurons)\n  neuronsRef.current = neurons\n  const onIntervalStepRef = useRef(onForward)\n  onIntervalStepRef.current = () => {\n    onForward();\n    setPBar(p => p + 1);\n  }\n  useEffect(() => {\n    if (isPlaying) {\n      var interval = setInterval(() => {\n        onIntervalStepRef.current()\n      }, 3000)\n    }\n    return () => clearInterval(interval);\n  }, [isPlaying, onIntervalStepRef])\n\n  useEffect(() => {\n    if (showChooseRuleModal) {\n      console.log(\"showChooseRuleModal is true\");\n    }\n  }, [])\n\n  // Key Bindings \n  function handleSpace() {\n    console.log(\"Space Pressed\");\n    setIsPlaying(p => !p);\n  }\n\n  function handleRightKey() {\n    console.log(\"Right Key Pressed\");\n    if (!hasEnded) {\n      onIntervalStepRef.current();\n    }\n  }\n\n  function handleLeftKey() {\n    console.log(\"Left Key Pressed\");\n    onBackward();\n  }\n\n  useKey(\"Space\", handleSpace);\n  useKey(\"ArrowLeft\", handleLeftKey);\n  useKey(\"ArrowRight\", handleRightKey);\n\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Container>\n            {error && <Alert variant=\"danger\">\n              {error}\n            </Alert>}\n            <Menu>\n\n              <Form>\n                <Form.File\n                  id=\"custom-file\"\n                  label={fileName ? fileName : \"Load file...\"}\n                  custom\n                  onChange={(e) => { handleLoad(e.target) }}\n                />\n              </Form>\n              <div>\n                <Button variant=\"primary\" disabled={time > 0 ? true : false} onClick={handleSave}><Save2 />{' '}Save</Button>\n              </div>\n              <div>\n                <Button variant=\"primary\" onClick={handleShowChoiceHistoryModal}><ClockHistory />{' '}Choice History</Button>\n              </div>\n              <div>\n                <DropdownButton id=\"file-dropdown\" title=\"Download samples\">\n                  <Dropdown.Item href=\"./samples/3k+3 spiker.xmp\" download>3k+3 Spiker</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/bitadder.xmp\" download>Bitadder</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/increasing comparator.xmp\" download>Increasing Comparator</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/naturally even.xmp\" download>Naturally Even</Dropdown.Item>\n                  <Dropdown.Item href=\"./samples/naturally greater one.xmp\" download>Naturally Greater One</Dropdown.Item>\n                </DropdownButton>\n              </div>\n            </Menu>\n            <div>\n              <div style={{ textAlign: \"center\" }}>\n                <h1 style={{ fontWeight: \"700\" }} className=\"text-primary\">WebSnapse</h1>\n              </div>\n              <Row>\n                <Col>\n                  <div>\n\n                    <Form>\n                      <Form.Group id=\"formGridCheckbox\">\n                        <Row>\n                          <Col sm={6}>\n                            <Form.Check type=\"checkbox\"\n                              label=\"Pseudorandom\"\n                              defaultChecked={isRandom}\n                              onChange={() => {\n                                setIsRandom(!isRandom)\n                              }} />\n                          </Col>\n\n                          <Col sm={1} style={{ textAlign: \"left\" }}>\n                            <OverlayTrigger\n                              placement=\"right\"\n                              delay={{ show: 250, hide: 400 }}\n                              overlay={renderTooltip}\n                            >\n                              <QuestionCircle />\n                            </OverlayTrigger>\n                          </Col>\n                        </Row>\n                      </Form.Group>\n                    </Form>\n                    {time == 0 ? <div></div> :\n                      <div style={{ backgroundColor: \"#778beb\", color: \"white\", borderRadius: \"10px\", padding: \"0.5em\" }}>\n                        <ClockFill color=\"white\" size={30} /> <strong>Time:</strong> {time == 0 ? \"Start playing!\" : time}\n                      </div>\n                    }\n\n                  </div>\n                </Col>\n                <Col>\n                  <div className=\"snapse-controls\" style={{ textAlign: \"center\", marginBottom: \"0.8em\" }}>\n                    <Button variant=\"link\" onClick={onBackward}><SkipBackwardFill /></Button>{' '}\n                    <div style={{ display: 'inline-block' }}>\n                      <ProgressBar key={pBar} isPlaying={isPlaying} />\n                      <Button size=\"lg\" className=\"snapse-controls-play\" onClick={handlePlay}>{isPlaying ? <PauseFill /> : <PlayFill />}</Button>\n                    </div> {' '}\n                    <Button variant=\"link\" onClick={() => onForward()}><SkipForwardFill /></Button>{' '}\n\n                  </div>\n                  <div style={{ textAlign: \"center\" }}>\n                    <Dropdown>\n                      <Dropdown.Toggle id=\"dropdown-basic\">\n                        <PlusSquare />{' '}Node Actions\n              </Dropdown.Toggle>\n                      <Dropdown.Menu>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-primary\" onClick={handleShow} disabled={time > 0 ? true : false}>New Node</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-primary\" onClick={handleShowNewOutputModal} disabled={time > 0 ? true : false}>New Output Node</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-info\" onClick={handleShowEditModal} disabled={time > 0 ? true : false}>Edit</Button></Dropdown.Item>\n                        <Dropdown.Item><Button variant=\"link\" size=\"sm\" className=\"node-actions text-danger\" onClick={handleShowDeleteModal} disabled={time > 0 ? true : false}>Delete</Button></Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </div>\n                </Col>\n                <Col style={{ textAlign: \"right\" }}><Button variant=\"danger\" onClick={handleReset}>Restart</Button>{' '}</Col>\n              </Row>\n            </div>\n            <hr />\n            <Snapse\n              neurons={neurons}\n              onEdgeCreate={(src, dst, addedEles) => {\n                onEdgeCreate(src.id(), dst.id())\n                addedEles.remove();\n              }}\n              handleChangePosition={handleNewPosition}\n              headless={headless} />\n            <ChoiceHistory time={time}\n              showChoiceHistoryModal={showChoiceHistoryModal}\n              handleCloseHoiceHistoryModal={handleCloseHoiceHistoryModal} />\n            <NewNodeForm showNewNodeModal={showNewNodeModal}\n              handleCloseModal={handleClose}\n              handleNewNode={handleNewNode}\n              handleError={showError} />\n            <NewOutputNodeForm showNewOutputModal={showNewOutputModal}\n              handleCloseNewOutputModal={handleCloseNewOutputModal}\n              handleNewOutput={handleNewOutput}\n              handleError={showError} />\n            <EditNodeForm showEditModal={showEditModal}\n              handleCloseEditModal={handleCloseEditModal}\n              handleEditNode={handleEditNode}\n              handleError={showError}\n              neurons={neurons} />\n            <DeleteNodeForm showDeleteModal={showDeleteModal}\n              handleCloseDeleteModal={handleCloseDeleteModal}\n              handleDeleteNode={handleDeleteNode}\n              handleError={showError}\n              neurons={neurons}\n            />\n            <ChooseRuleForm showChooseRuleModal={showChooseRuleModal}\n              handleCloseChooseRuleModal={handleCloseChooseRuleModal}\n              rules={guidedRules}\n              handleChosenRules={handleChosenRules}\n            />\n            {Prompt}\n          </Container>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nconst shortening = keyframes`\n  from {\n    transform: scaleX(100%);\n  }\n\n  to {\n    transform: scaleX(0%);\n  }\n`\nconst ProgressBar = styled.div`\n  ${props =>\n    props.isPlaying &&\n    css`\n      animation: ${shortening} 3s linear; \n    `}\n  background-color: #c44569;\n  height: 4px;\n  transform-origin: left center;\n  margin-bottom: 2px;\n`\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport gridGuide from 'cytoscape-grid-guide';\n\ncytoscape.use(edgehandles)\ncytoscape.use(gridGuide)\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}